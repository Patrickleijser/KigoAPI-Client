<?php
/**
 * Booking
 *
 * PHP version 5
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Patrick Leijser
 * @link     http://patrickleijser.nl
 */

/**
 * Kigo Core API
 *
 * https://www.kigoapis.com/core/v0.8/swagger/
 *
 * The version of the Kigo Core API: v0.8
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\Kigo\Model;

use \ArrayAccess;
use \Piksel\Kigo\ObjectSerializer;

/**
 * Booking Class Doc Comment
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Patrick Leijser
 * @link     http://patrickleijser.nl
 */
class Booking implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Booking';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'external_id' => 'string',
        'added_on' => '\DateTime',
        'last_modified_date' => '\DateTime',
        'property_id' => 'int',
        'property' => '\Piksel\Kigo\Model\Property',
        'unit_id' => 'int',
        'solution_id' => 'int',
        'check_in_date' => '\DateTime',
        'check_in_time_minutes_from_midnight' => 'int',
        'check_out_date' => '\DateTime',
        'check_out_time_minutes_from_midnight' => 'int',
        'status' => 'string',
        'type' => 'string',
        'renter_id' => 'int',
        'renter' => '\Piksel\Kigo\Model\Person',
        'agent_id' => 'int',
        'agent' => '\Piksel\Kigo\Model\Person',
        'private_notes' => 'string',
        'public_notes' => 'string',
        'language' => 'string',
        'statement' => '\Piksel\Kigo\Model\Statement',
        'num_adults' => 'int',
        'num_children' => 'int',
        'booking_source_id' => 'int',
        'booking_source' => '\Piksel\Kigo\Model\LeadSource',
        'booking_source_editable' => 'bool',
        'booking_date' => '\DateTime',
        'credit_card' => '\Piksel\Kigo\Model\CreditCard',
        'held_until' => '\DateTime',
        'distribution_partner_id' => 'string',
        'distribution_partner' => 'string',
        'distribution_partner_username' => 'string',
        'is_imported' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'external_id' => null,
        'added_on' => 'date-time',
        'last_modified_date' => 'date-time',
        'property_id' => 'int32',
        'property' => null,
        'unit_id' => 'int32',
        'solution_id' => 'int32',
        'check_in_date' => 'date',
        'check_in_time_minutes_from_midnight' => 'int32',
        'check_out_date' => 'date',
        'check_out_time_minutes_from_midnight' => 'int32',
        'status' => null,
        'type' => null,
        'renter_id' => 'int32',
        'renter' => null,
        'agent_id' => 'int32',
        'agent' => null,
        'private_notes' => null,
        'public_notes' => null,
        'language' => null,
        'statement' => null,
        'num_adults' => 'int32',
        'num_children' => 'int32',
        'booking_source_id' => 'int32',
        'booking_source' => null,
        'booking_source_editable' => null,
        'booking_date' => 'date-time',
        'credit_card' => null,
        'held_until' => 'date-time',
        'distribution_partner_id' => null,
        'distribution_partner' => null,
        'distribution_partner_username' => null,
        'is_imported' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'external_id' => 'externalID',
        'added_on' => 'addedOn',
        'last_modified_date' => 'lastModifiedDate',
        'property_id' => 'propertyID',
        'property' => 'property',
        'unit_id' => 'unitID',
        'solution_id' => 'solutionID',
        'check_in_date' => 'checkInDate',
        'check_in_time_minutes_from_midnight' => 'checkInTimeMinutesFromMidnight',
        'check_out_date' => 'checkOutDate',
        'check_out_time_minutes_from_midnight' => 'checkOutTimeMinutesFromMidnight',
        'status' => 'status',
        'type' => 'type',
        'renter_id' => 'renterID',
        'renter' => 'renter',
        'agent_id' => 'agentID',
        'agent' => 'agent',
        'private_notes' => 'privateNotes',
        'public_notes' => 'publicNotes',
        'language' => 'language',
        'statement' => 'statement',
        'num_adults' => 'numAdults',
        'num_children' => 'numChildren',
        'booking_source_id' => 'bookingSourceID',
        'booking_source' => 'bookingSource',
        'booking_source_editable' => 'bookingSourceEditable',
        'booking_date' => 'bookingDate',
        'credit_card' => 'creditCard',
        'held_until' => 'heldUntil',
        'distribution_partner_id' => 'distributionPartnerID',
        'distribution_partner' => 'distributionPartner',
        'distribution_partner_username' => 'distributionPartnerUsername',
        'is_imported' => 'isImported'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'external_id' => 'setExternalId',
        'added_on' => 'setAddedOn',
        'last_modified_date' => 'setLastModifiedDate',
        'property_id' => 'setPropertyId',
        'property' => 'setProperty',
        'unit_id' => 'setUnitId',
        'solution_id' => 'setSolutionId',
        'check_in_date' => 'setCheckInDate',
        'check_in_time_minutes_from_midnight' => 'setCheckInTimeMinutesFromMidnight',
        'check_out_date' => 'setCheckOutDate',
        'check_out_time_minutes_from_midnight' => 'setCheckOutTimeMinutesFromMidnight',
        'status' => 'setStatus',
        'type' => 'setType',
        'renter_id' => 'setRenterId',
        'renter' => 'setRenter',
        'agent_id' => 'setAgentId',
        'agent' => 'setAgent',
        'private_notes' => 'setPrivateNotes',
        'public_notes' => 'setPublicNotes',
        'language' => 'setLanguage',
        'statement' => 'setStatement',
        'num_adults' => 'setNumAdults',
        'num_children' => 'setNumChildren',
        'booking_source_id' => 'setBookingSourceId',
        'booking_source' => 'setBookingSource',
        'booking_source_editable' => 'setBookingSourceEditable',
        'booking_date' => 'setBookingDate',
        'credit_card' => 'setCreditCard',
        'held_until' => 'setHeldUntil',
        'distribution_partner_id' => 'setDistributionPartnerId',
        'distribution_partner' => 'setDistributionPartner',
        'distribution_partner_username' => 'setDistributionPartnerUsername',
        'is_imported' => 'setIsImported'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'external_id' => 'getExternalId',
        'added_on' => 'getAddedOn',
        'last_modified_date' => 'getLastModifiedDate',
        'property_id' => 'getPropertyId',
        'property' => 'getProperty',
        'unit_id' => 'getUnitId',
        'solution_id' => 'getSolutionId',
        'check_in_date' => 'getCheckInDate',
        'check_in_time_minutes_from_midnight' => 'getCheckInTimeMinutesFromMidnight',
        'check_out_date' => 'getCheckOutDate',
        'check_out_time_minutes_from_midnight' => 'getCheckOutTimeMinutesFromMidnight',
        'status' => 'getStatus',
        'type' => 'getType',
        'renter_id' => 'getRenterId',
        'renter' => 'getRenter',
        'agent_id' => 'getAgentId',
        'agent' => 'getAgent',
        'private_notes' => 'getPrivateNotes',
        'public_notes' => 'getPublicNotes',
        'language' => 'getLanguage',
        'statement' => 'getStatement',
        'num_adults' => 'getNumAdults',
        'num_children' => 'getNumChildren',
        'booking_source_id' => 'getBookingSourceId',
        'booking_source' => 'getBookingSource',
        'booking_source_editable' => 'getBookingSourceEditable',
        'booking_date' => 'getBookingDate',
        'credit_card' => 'getCreditCard',
        'held_until' => 'getHeldUntil',
        'distribution_partner_id' => 'getDistributionPartnerId',
        'distribution_partner' => 'getDistributionPartner',
        'distribution_partner_username' => 'getDistributionPartnerUsername',
        'is_imported' => 'getIsImported'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_UNKNOWN = 'Unknown';
    const STATUS_PENDING_CONFIRMATION = 'PendingConfirmation';
    const STATUS_CONFIRMED = 'Confirmed';
    const STATUS_CHECKED_IN = 'CheckedIn';
    const STATUS_CHECKED_OUT = 'CheckedOut';
    const STATUS_CANCELLED = 'Cancelled';
    const STATUS_HELD = 'Held';
    const STATUS_MARKED_FOR_DELETION = 'MarkedForDeletion';
    const TYPE_UNKNOWN = 'Unknown';
    const TYPE_ONLINE_BOOKING = 'OnlineBooking';
    const TYPE_HOUSE_BOOKING = 'HouseBooking';
    const TYPE_OUTSIDE_AGENCY_BOOKING = 'OutsideAgencyBooking';
    const TYPE_OWNER_BOOKING = 'OwnerBooking';
    const TYPE_BLOCK_OUT = 'BlockOut';
    const TYPE_EXTERNAL_PMS_BOOKING = 'ExternalPMSBooking';
    const TYPE_CHANNEL_MANAGER_BOOKING = 'ChannelManagerBooking';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_UNKNOWN,
            self::STATUS_PENDING_CONFIRMATION,
            self::STATUS_CONFIRMED,
            self::STATUS_CHECKED_IN,
            self::STATUS_CHECKED_OUT,
            self::STATUS_CANCELLED,
            self::STATUS_HELD,
            self::STATUS_MARKED_FOR_DELETION,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_UNKNOWN,
            self::TYPE_ONLINE_BOOKING,
            self::TYPE_HOUSE_BOOKING,
            self::TYPE_OUTSIDE_AGENCY_BOOKING,
            self::TYPE_OWNER_BOOKING,
            self::TYPE_BLOCK_OUT,
            self::TYPE_EXTERNAL_PMS_BOOKING,
            self::TYPE_CHANNEL_MANAGER_BOOKING,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['added_on'] = isset($data['added_on']) ? $data['added_on'] : null;
        $this->container['last_modified_date'] = isset($data['last_modified_date']) ? $data['last_modified_date'] : null;
        $this->container['property_id'] = isset($data['property_id']) ? $data['property_id'] : null;
        $this->container['property'] = isset($data['property']) ? $data['property'] : null;
        $this->container['unit_id'] = isset($data['unit_id']) ? $data['unit_id'] : null;
        $this->container['solution_id'] = isset($data['solution_id']) ? $data['solution_id'] : null;
        $this->container['check_in_date'] = isset($data['check_in_date']) ? $data['check_in_date'] : null;
        $this->container['check_in_time_minutes_from_midnight'] = isset($data['check_in_time_minutes_from_midnight']) ? $data['check_in_time_minutes_from_midnight'] : null;
        $this->container['check_out_date'] = isset($data['check_out_date']) ? $data['check_out_date'] : null;
        $this->container['check_out_time_minutes_from_midnight'] = isset($data['check_out_time_minutes_from_midnight']) ? $data['check_out_time_minutes_from_midnight'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['renter_id'] = isset($data['renter_id']) ? $data['renter_id'] : null;
        $this->container['renter'] = isset($data['renter']) ? $data['renter'] : null;
        $this->container['agent_id'] = isset($data['agent_id']) ? $data['agent_id'] : null;
        $this->container['agent'] = isset($data['agent']) ? $data['agent'] : null;
        $this->container['private_notes'] = isset($data['private_notes']) ? $data['private_notes'] : null;
        $this->container['public_notes'] = isset($data['public_notes']) ? $data['public_notes'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['statement'] = isset($data['statement']) ? $data['statement'] : null;
        $this->container['num_adults'] = isset($data['num_adults']) ? $data['num_adults'] : null;
        $this->container['num_children'] = isset($data['num_children']) ? $data['num_children'] : null;
        $this->container['booking_source_id'] = isset($data['booking_source_id']) ? $data['booking_source_id'] : null;
        $this->container['booking_source'] = isset($data['booking_source']) ? $data['booking_source'] : null;
        $this->container['booking_source_editable'] = isset($data['booking_source_editable']) ? $data['booking_source_editable'] : null;
        $this->container['booking_date'] = isset($data['booking_date']) ? $data['booking_date'] : null;
        $this->container['credit_card'] = isset($data['credit_card']) ? $data['credit_card'] : null;
        $this->container['held_until'] = isset($data['held_until']) ? $data['held_until'] : null;
        $this->container['distribution_partner_id'] = isset($data['distribution_partner_id']) ? $data['distribution_partner_id'] : null;
        $this->container['distribution_partner'] = isset($data['distribution_partner']) ? $data['distribution_partner'] : null;
        $this->container['distribution_partner_username'] = isset($data['distribution_partner_username']) ? $data['distribution_partner_username'] : null;
        $this->container['is_imported'] = isset($data['is_imported']) ? $data['is_imported'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['property_id'] === null) {
            $invalidProperties[] = "'property_id' can't be null";
        }
        if (($this->container['property_id'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'property_id', must be smaller than or equal to 2147483647.";
        }

        if (($this->container['property_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'property_id', must be bigger than or equal to 1.";
        }

        if ($this->container['check_in_date'] === null) {
            $invalidProperties[] = "'check_in_date' can't be null";
        }
        if (!is_null($this->container['check_in_time_minutes_from_midnight']) && ($this->container['check_in_time_minutes_from_midnight'] > 1439)) {
            $invalidProperties[] = "invalid value for 'check_in_time_minutes_from_midnight', must be smaller than or equal to 1439.";
        }

        if (!is_null($this->container['check_in_time_minutes_from_midnight']) && ($this->container['check_in_time_minutes_from_midnight'] < 0)) {
            $invalidProperties[] = "invalid value for 'check_in_time_minutes_from_midnight', must be bigger than or equal to 0.";
        }

        if ($this->container['check_out_date'] === null) {
            $invalidProperties[] = "'check_out_date' can't be null";
        }
        if (!is_null($this->container['check_out_time_minutes_from_midnight']) && ($this->container['check_out_time_minutes_from_midnight'] > 1439)) {
            $invalidProperties[] = "invalid value for 'check_out_time_minutes_from_midnight', must be smaller than or equal to 1439.";
        }

        if (!is_null($this->container['check_out_time_minutes_from_midnight']) && ($this->container['check_out_time_minutes_from_midnight'] < 0)) {
            $invalidProperties[] = "invalid value for 'check_out_time_minutes_from_midnight', must be bigger than or equal to 0.";
        }

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['renter_id'] === null) {
            $invalidProperties[] = "'renter_id' can't be null";
        }
        if ($this->container['num_adults'] === null) {
            $invalidProperties[] = "'num_adults' can't be null";
        }
        if (($this->container['num_adults'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'num_adults', must be smaller than or equal to 2147483647.";
        }

        if (($this->container['num_adults'] < 1)) {
            $invalidProperties[] = "invalid value for 'num_adults', must be bigger than or equal to 1.";
        }

        if ($this->container['num_children'] === null) {
            $invalidProperties[] = "'num_children' can't be null";
        }
        if (($this->container['num_children'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'num_children', must be smaller than or equal to 2147483647.";
        }

        if (($this->container['num_children'] < 0)) {
            $invalidProperties[] = "invalid value for 'num_children', must be bigger than or equal to 0.";
        }

        if ($this->container['booking_source_id'] === null) {
            $invalidProperties[] = "'booking_source_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id external_id
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets added_on
     *
     * @return \DateTime|null
     */
    public function getAddedOn()
    {
        return $this->container['added_on'];
    }

    /**
     * Sets added_on
     *
     * @param \DateTime|null $added_on added_on
     *
     * @return $this
     */
    public function setAddedOn($added_on)
    {
        $this->container['added_on'] = $added_on;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param \DateTime|null $last_modified_date last_modified_date
     *
     * @return $this
     */
    public function setLastModifiedDate($last_modified_date)
    {
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets property_id
     *
     * @return int
     */
    public function getPropertyId()
    {
        return $this->container['property_id'];
    }

    /**
     * Sets property_id
     *
     * @param int $property_id property_id
     *
     * @return $this
     */
    public function setPropertyId($property_id)
    {

        if (($property_id > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $property_id when calling Booking., must be smaller than or equal to 2147483647.');
        }
        if (($property_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $property_id when calling Booking., must be bigger than or equal to 1.');
        }

        $this->container['property_id'] = $property_id;

        return $this;
    }

    /**
     * Gets property
     *
     * @return \Piksel\Kigo\Model\Property|null
     */
    public function getProperty()
    {
        return $this->container['property'];
    }

    /**
     * Sets property
     *
     * @param \Piksel\Kigo\Model\Property|null $property property
     *
     * @return $this
     */
    public function setProperty($property)
    {
        $this->container['property'] = $property;

        return $this;
    }

    /**
     * Gets unit_id
     *
     * @return int|null
     */
    public function getUnitId()
    {
        return $this->container['unit_id'];
    }

    /**
     * Sets unit_id
     *
     * @param int|null $unit_id unit_id
     *
     * @return $this
     */
    public function setUnitId($unit_id)
    {
        $this->container['unit_id'] = $unit_id;

        return $this;
    }

    /**
     * Gets solution_id
     *
     * @return int|null
     */
    public function getSolutionId()
    {
        return $this->container['solution_id'];
    }

    /**
     * Sets solution_id
     *
     * @param int|null $solution_id solution_id
     *
     * @return $this
     */
    public function setSolutionId($solution_id)
    {
        $this->container['solution_id'] = $solution_id;

        return $this;
    }

    /**
     * Gets check_in_date
     *
     * @return \DateTime
     */
    public function getCheckInDate()
    {
        return $this->container['check_in_date'];
    }

    /**
     * Sets check_in_date
     *
     * @param \DateTime $check_in_date check_in_date
     *
     * @return $this
     */
    public function setCheckInDate($check_in_date)
    {
        $this->container['check_in_date'] = $check_in_date;

        return $this;
    }

    /**
     * Gets check_in_time_minutes_from_midnight
     *
     * @return int|null
     */
    public function getCheckInTimeMinutesFromMidnight()
    {
        return $this->container['check_in_time_minutes_from_midnight'];
    }

    /**
     * Sets check_in_time_minutes_from_midnight
     *
     * @param int|null $check_in_time_minutes_from_midnight Property's local timezone. Defaults to property's default check in time.
     *
     * @return $this
     */
    public function setCheckInTimeMinutesFromMidnight($check_in_time_minutes_from_midnight)
    {

        if (!is_null($check_in_time_minutes_from_midnight) && ($check_in_time_minutes_from_midnight > 1439)) {
            throw new \InvalidArgumentException('invalid value for $check_in_time_minutes_from_midnight when calling Booking., must be smaller than or equal to 1439.');
        }
        if (!is_null($check_in_time_minutes_from_midnight) && ($check_in_time_minutes_from_midnight < 0)) {
            throw new \InvalidArgumentException('invalid value for $check_in_time_minutes_from_midnight when calling Booking., must be bigger than or equal to 0.');
        }

        $this->container['check_in_time_minutes_from_midnight'] = $check_in_time_minutes_from_midnight;

        return $this;
    }

    /**
     * Gets check_out_date
     *
     * @return \DateTime
     */
    public function getCheckOutDate()
    {
        return $this->container['check_out_date'];
    }

    /**
     * Sets check_out_date
     *
     * @param \DateTime $check_out_date check_out_date
     *
     * @return $this
     */
    public function setCheckOutDate($check_out_date)
    {
        $this->container['check_out_date'] = $check_out_date;

        return $this;
    }

    /**
     * Gets check_out_time_minutes_from_midnight
     *
     * @return int|null
     */
    public function getCheckOutTimeMinutesFromMidnight()
    {
        return $this->container['check_out_time_minutes_from_midnight'];
    }

    /**
     * Sets check_out_time_minutes_from_midnight
     *
     * @param int|null $check_out_time_minutes_from_midnight Property's local timezone. Defaults to property's default check out time.
     *
     * @return $this
     */
    public function setCheckOutTimeMinutesFromMidnight($check_out_time_minutes_from_midnight)
    {

        if (!is_null($check_out_time_minutes_from_midnight) && ($check_out_time_minutes_from_midnight > 1439)) {
            throw new \InvalidArgumentException('invalid value for $check_out_time_minutes_from_midnight when calling Booking., must be smaller than or equal to 1439.');
        }
        if (!is_null($check_out_time_minutes_from_midnight) && ($check_out_time_minutes_from_midnight < 0)) {
            throw new \InvalidArgumentException('invalid value for $check_out_time_minutes_from_midnight when calling Booking., must be bigger than or equal to 0.');
        }

        $this->container['check_out_time_minutes_from_midnight'] = $check_out_time_minutes_from_midnight;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Allowed values are: Unknown, MarkedForDeletion, PendingConfirmation, Confirmed, CheckedIn, CheckedOut, Cancelled, Held
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Allowed values are: Unknown, OnlineBooking, HouseBooking, OutsideAgencyBooking, OwnerBooking, BlockOut, ExternalPMSBooking
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets renter_id
     *
     * @return int
     */
    public function getRenterId()
    {
        return $this->container['renter_id'];
    }

    /**
     * Sets renter_id
     *
     * @param int $renter_id renter_id
     *
     * @return $this
     */
    public function setRenterId($renter_id)
    {
        $this->container['renter_id'] = $renter_id;

        return $this;
    }

    /**
     * Gets renter
     *
     * @return \Piksel\Kigo\Model\Person|null
     */
    public function getRenter()
    {
        return $this->container['renter'];
    }

    /**
     * Sets renter
     *
     * @param \Piksel\Kigo\Model\Person|null $renter renter
     *
     * @return $this
     */
    public function setRenter($renter)
    {
        $this->container['renter'] = $renter;

        return $this;
    }

    /**
     * Gets agent_id
     *
     * @return int|null
     */
    public function getAgentId()
    {
        return $this->container['agent_id'];
    }

    /**
     * Sets agent_id
     *
     * @param int|null $agent_id agent_id
     *
     * @return $this
     */
    public function setAgentId($agent_id)
    {
        $this->container['agent_id'] = $agent_id;

        return $this;
    }

    /**
     * Gets agent
     *
     * @return \Piksel\Kigo\Model\Person|null
     */
    public function getAgent()
    {
        return $this->container['agent'];
    }

    /**
     * Sets agent
     *
     * @param \Piksel\Kigo\Model\Person|null $agent agent
     *
     * @return $this
     */
    public function setAgent($agent)
    {
        $this->container['agent'] = $agent;

        return $this;
    }

    /**
     * Gets private_notes
     *
     * @return string|null
     */
    public function getPrivateNotes()
    {
        return $this->container['private_notes'];
    }

    /**
     * Sets private_notes
     *
     * @param string|null $private_notes private_notes
     *
     * @return $this
     */
    public function setPrivateNotes($private_notes)
    {
        $this->container['private_notes'] = $private_notes;

        return $this;
    }

    /**
     * Gets public_notes
     *
     * @return string|null
     */
    public function getPublicNotes()
    {
        return $this->container['public_notes'];
    }

    /**
     * Sets public_notes
     *
     * @param string|null $public_notes public_notes
     *
     * @return $this
     */
    public function setPublicNotes($public_notes)
    {
        $this->container['public_notes'] = $public_notes;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language language
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets statement
     *
     * @return \Piksel\Kigo\Model\Statement|null
     */
    public function getStatement()
    {
        return $this->container['statement'];
    }

    /**
     * Sets statement
     *
     * @param \Piksel\Kigo\Model\Statement|null $statement statement
     *
     * @return $this
     */
    public function setStatement($statement)
    {
        $this->container['statement'] = $statement;

        return $this;
    }

    /**
     * Gets num_adults
     *
     * @return int
     */
    public function getNumAdults()
    {
        return $this->container['num_adults'];
    }

    /**
     * Sets num_adults
     *
     * @param int $num_adults num_adults
     *
     * @return $this
     */
    public function setNumAdults($num_adults)
    {

        if (($num_adults > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $num_adults when calling Booking., must be smaller than or equal to 2147483647.');
        }
        if (($num_adults < 1)) {
            throw new \InvalidArgumentException('invalid value for $num_adults when calling Booking., must be bigger than or equal to 1.');
        }

        $this->container['num_adults'] = $num_adults;

        return $this;
    }

    /**
     * Gets num_children
     *
     * @return int
     */
    public function getNumChildren()
    {
        return $this->container['num_children'];
    }

    /**
     * Sets num_children
     *
     * @param int $num_children num_children
     *
     * @return $this
     */
    public function setNumChildren($num_children)
    {

        if (($num_children > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $num_children when calling Booking., must be smaller than or equal to 2147483647.');
        }
        if (($num_children < 0)) {
            throw new \InvalidArgumentException('invalid value for $num_children when calling Booking., must be bigger than or equal to 0.');
        }

        $this->container['num_children'] = $num_children;

        return $this;
    }

    /**
     * Gets booking_source_id
     *
     * @return int
     */
    public function getBookingSourceId()
    {
        return $this->container['booking_source_id'];
    }

    /**
     * Sets booking_source_id
     *
     * @param int $booking_source_id booking_source_id
     *
     * @return $this
     */
    public function setBookingSourceId($booking_source_id)
    {
        $this->container['booking_source_id'] = $booking_source_id;

        return $this;
    }

    /**
     * Gets booking_source
     *
     * @return \Piksel\Kigo\Model\LeadSource|null
     */
    public function getBookingSource()
    {
        return $this->container['booking_source'];
    }

    /**
     * Sets booking_source
     *
     * @param \Piksel\Kigo\Model\LeadSource|null $booking_source booking_source
     *
     * @return $this
     */
    public function setBookingSource($booking_source)
    {
        $this->container['booking_source'] = $booking_source;

        return $this;
    }

    /**
     * Gets booking_source_editable
     *
     * @return bool|null
     */
    public function getBookingSourceEditable()
    {
        return $this->container['booking_source_editable'];
    }

    /**
     * Sets booking_source_editable
     *
     * @param bool|null $booking_source_editable Prevents from updating the booking source with the booking endpoint
     *
     * @return $this
     */
    public function setBookingSourceEditable($booking_source_editable)
    {
        $this->container['booking_source_editable'] = $booking_source_editable;

        return $this;
    }

    /**
     * Gets booking_date
     *
     * @return \DateTime|null
     */
    public function getBookingDate()
    {
        return $this->container['booking_date'];
    }

    /**
     * Sets booking_date
     *
     * @param \DateTime|null $booking_date booking_date
     *
     * @return $this
     */
    public function setBookingDate($booking_date)
    {
        $this->container['booking_date'] = $booking_date;

        return $this;
    }

    /**
     * Gets credit_card
     *
     * @return \Piksel\Kigo\Model\CreditCard|null
     */
    public function getCreditCard()
    {
        return $this->container['credit_card'];
    }

    /**
     * Sets credit_card
     *
     * @param \Piksel\Kigo\Model\CreditCard|null $credit_card credit_card
     *
     * @return $this
     */
    public function setCreditCard($credit_card)
    {
        $this->container['credit_card'] = $credit_card;

        return $this;
    }

    /**
     * Gets held_until
     *
     * @return \DateTime|null
     */
    public function getHeldUntil()
    {
        return $this->container['held_until'];
    }

    /**
     * Sets held_until
     *
     * @param \DateTime|null $held_until held_until
     *
     * @return $this
     */
    public function setHeldUntil($held_until)
    {
        $this->container['held_until'] = $held_until;

        return $this;
    }

    /**
     * Gets distribution_partner_id
     *
     * @return string|null
     */
    public function getDistributionPartnerId()
    {
        return $this->container['distribution_partner_id'];
    }

    /**
     * Sets distribution_partner_id
     *
     * @param string|null $distribution_partner_id distribution_partner_id
     *
     * @return $this
     */
    public function setDistributionPartnerId($distribution_partner_id)
    {
        $this->container['distribution_partner_id'] = $distribution_partner_id;

        return $this;
    }

    /**
     * Gets distribution_partner
     *
     * @return string|null
     */
    public function getDistributionPartner()
    {
        return $this->container['distribution_partner'];
    }

    /**
     * Sets distribution_partner
     *
     * @param string|null $distribution_partner distribution_partner
     *
     * @return $this
     */
    public function setDistributionPartner($distribution_partner)
    {
        $this->container['distribution_partner'] = $distribution_partner;

        return $this;
    }

    /**
     * Gets distribution_partner_username
     *
     * @return string|null
     */
    public function getDistributionPartnerUsername()
    {
        return $this->container['distribution_partner_username'];
    }

    /**
     * Sets distribution_partner_username
     *
     * @param string|null $distribution_partner_username distribution_partner_username
     *
     * @return $this
     */
    public function setDistributionPartnerUsername($distribution_partner_username)
    {
        $this->container['distribution_partner_username'] = $distribution_partner_username;

        return $this;
    }

    /**
     * Gets is_imported
     *
     * @return bool|null
     */
    public function getIsImported()
    {
        return $this->container['is_imported'];
    }

    /**
     * Sets is_imported
     *
     * @param bool|null $is_imported is_imported
     *
     * @return $this
     */
    public function setIsImported($is_imported)
    {
        $this->container['is_imported'] = $is_imported;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


