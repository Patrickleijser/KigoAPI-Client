<?php
/**
 * Person
 *
 * PHP version 5
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Patrick Leijser
 * @link     http://patrickleijser.nl
 */

/**
 * Kigo Core API
 *
 * https://www.kigoapis.com/core/v0.8/swagger/
 *
 * The version of the Kigo Core API: v0.8
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\Kigo\Model;

use \ArrayAccess;
use \Piksel\Kigo\ObjectSerializer;

/**
 * Person Class Doc Comment
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Patrick Leijser
 * @link     http://patrickleijser.nl
 */
class Person implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Person';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'solution_id' => 'int',
        'last_modified_date' => '\DateTime',
        'first_name' => 'string',
        'last_name' => 'string',
        'email' => 'string',
        'cell_phone' => 'string',
        'work_phone' => 'string',
        'home_phone' => 'string',
        'address' => '\Piksel\Kigo\Model\Address',
        'lead_source' => '\Piksel\Kigo\Model\LeadSource',
        'lead_source_id' => 'int',
        'company' => 'string',
        'notes' => 'string',
        'language' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'solution_id' => 'int32',
        'last_modified_date' => 'date-time',
        'first_name' => null,
        'last_name' => null,
        'email' => null,
        'cell_phone' => null,
        'work_phone' => null,
        'home_phone' => null,
        'address' => null,
        'lead_source' => null,
        'lead_source_id' => 'int32',
        'company' => null,
        'notes' => null,
        'language' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'solution_id' => 'solutionID',
        'last_modified_date' => 'lastModifiedDate',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'email' => 'email',
        'cell_phone' => 'cellPhone',
        'work_phone' => 'workPhone',
        'home_phone' => 'homePhone',
        'address' => 'address',
        'lead_source' => 'leadSource',
        'lead_source_id' => 'leadSourceID',
        'company' => 'company',
        'notes' => 'notes',
        'language' => 'language'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'solution_id' => 'setSolutionId',
        'last_modified_date' => 'setLastModifiedDate',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'email' => 'setEmail',
        'cell_phone' => 'setCellPhone',
        'work_phone' => 'setWorkPhone',
        'home_phone' => 'setHomePhone',
        'address' => 'setAddress',
        'lead_source' => 'setLeadSource',
        'lead_source_id' => 'setLeadSourceId',
        'company' => 'setCompany',
        'notes' => 'setNotes',
        'language' => 'setLanguage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'solution_id' => 'getSolutionId',
        'last_modified_date' => 'getLastModifiedDate',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'email' => 'getEmail',
        'cell_phone' => 'getCellPhone',
        'work_phone' => 'getWorkPhone',
        'home_phone' => 'getHomePhone',
        'address' => 'getAddress',
        'lead_source' => 'getLeadSource',
        'lead_source_id' => 'getLeadSourceId',
        'company' => 'getCompany',
        'notes' => 'getNotes',
        'language' => 'getLanguage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['solution_id'] = isset($data['solution_id']) ? $data['solution_id'] : null;
        $this->container['last_modified_date'] = isset($data['last_modified_date']) ? $data['last_modified_date'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['cell_phone'] = isset($data['cell_phone']) ? $data['cell_phone'] : null;
        $this->container['work_phone'] = isset($data['work_phone']) ? $data['work_phone'] : null;
        $this->container['home_phone'] = isset($data['home_phone']) ? $data['home_phone'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['lead_source'] = isset($data['lead_source']) ? $data['lead_source'] : null;
        $this->container['lead_source_id'] = isset($data['lead_source_id']) ? $data['lead_source_id'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ((mb_strlen($this->container['first_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ((mb_strlen($this->container['last_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 200)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['cell_phone']) && (mb_strlen($this->container['cell_phone']) > 200)) {
            $invalidProperties[] = "invalid value for 'cell_phone', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['work_phone']) && (mb_strlen($this->container['work_phone']) > 200)) {
            $invalidProperties[] = "invalid value for 'work_phone', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['home_phone']) && (mb_strlen($this->container['home_phone']) > 200)) {
            $invalidProperties[] = "invalid value for 'home_phone', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['company']) && (mb_strlen($this->container['company']) > 50)) {
            $invalidProperties[] = "invalid value for 'company', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets solution_id
     *
     * @return int|null
     */
    public function getSolutionId()
    {
        return $this->container['solution_id'];
    }

    /**
     * Sets solution_id
     *
     * @param int|null $solution_id solution_id
     *
     * @return $this
     */
    public function setSolutionId($solution_id)
    {
        $this->container['solution_id'] = $solution_id;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param \DateTime|null $last_modified_date last_modified_date
     *
     * @return $this
     */
    public function setLastModifiedDate($last_modified_date)
    {
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        if ((mb_strlen($first_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling Person., must be smaller than or equal to 50.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        if ((mb_strlen($last_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling Person., must be smaller than or equal to 50.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        if (!is_null($email) && (mb_strlen($email) > 200)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Person., must be smaller than or equal to 200.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets cell_phone
     *
     * @return string|null
     */
    public function getCellPhone()
    {
        return $this->container['cell_phone'];
    }

    /**
     * Sets cell_phone
     *
     * @param string|null $cell_phone cell_phone
     *
     * @return $this
     */
    public function setCellPhone($cell_phone)
    {
        if (!is_null($cell_phone) && (mb_strlen($cell_phone) > 200)) {
            throw new \InvalidArgumentException('invalid length for $cell_phone when calling Person., must be smaller than or equal to 200.');
        }

        $this->container['cell_phone'] = $cell_phone;

        return $this;
    }

    /**
     * Gets work_phone
     *
     * @return string|null
     */
    public function getWorkPhone()
    {
        return $this->container['work_phone'];
    }

    /**
     * Sets work_phone
     *
     * @param string|null $work_phone work_phone
     *
     * @return $this
     */
    public function setWorkPhone($work_phone)
    {
        if (!is_null($work_phone) && (mb_strlen($work_phone) > 200)) {
            throw new \InvalidArgumentException('invalid length for $work_phone when calling Person., must be smaller than or equal to 200.');
        }

        $this->container['work_phone'] = $work_phone;

        return $this;
    }

    /**
     * Gets home_phone
     *
     * @return string|null
     */
    public function getHomePhone()
    {
        return $this->container['home_phone'];
    }

    /**
     * Sets home_phone
     *
     * @param string|null $home_phone home_phone
     *
     * @return $this
     */
    public function setHomePhone($home_phone)
    {
        if (!is_null($home_phone) && (mb_strlen($home_phone) > 200)) {
            throw new \InvalidArgumentException('invalid length for $home_phone when calling Person., must be smaller than or equal to 200.');
        }

        $this->container['home_phone'] = $home_phone;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Piksel\Kigo\Model\Address|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Piksel\Kigo\Model\Address|null $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets lead_source
     *
     * @return \Piksel\Kigo\Model\LeadSource|null
     */
    public function getLeadSource()
    {
        return $this->container['lead_source'];
    }

    /**
     * Sets lead_source
     *
     * @param \Piksel\Kigo\Model\LeadSource|null $lead_source lead_source
     *
     * @return $this
     */
    public function setLeadSource($lead_source)
    {
        $this->container['lead_source'] = $lead_source;

        return $this;
    }

    /**
     * Gets lead_source_id
     *
     * @return int|null
     */
    public function getLeadSourceId()
    {
        return $this->container['lead_source_id'];
    }

    /**
     * Sets lead_source_id
     *
     * @param int|null $lead_source_id lead_source_id
     *
     * @return $this
     */
    public function setLeadSourceId($lead_source_id)
    {
        $this->container['lead_source_id'] = $lead_source_id;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company company
     *
     * @return $this
     */
    public function setCompany($company)
    {
        if (!is_null($company) && (mb_strlen($company) > 50)) {
            throw new \InvalidArgumentException('invalid length for $company when calling Person., must be smaller than or equal to 50.');
        }

        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language language
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


