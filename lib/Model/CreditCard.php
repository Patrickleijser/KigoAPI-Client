<?php
/**
 * CreditCard
 *
 * PHP version 5
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Patrick Leijser
 * @link     http://patrickleijser.nl
 */

/**
 * Kigo Core API
 *
 * https://www.kigoapis.com/core/v0.8/swagger/
 *
 * The version of the Kigo Core API: v0.8
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\Kigo\Model;

use \ArrayAccess;
use \Piksel\Kigo\ObjectSerializer;

/**
 * CreditCard Class Doc Comment
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Patrick Leijser
 * @link     http://patrickleijser.nl
 */
class CreditCard implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreditCard';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'cardholder_name' => 'string',
        'number' => 'string',
        'avs_address' => 'string',
        'avs_city' => 'string',
        'avs_state' => 'string',
        'avs_zip' => 'string',
        'avs_country' => 'string',
        'expiration_date' => 'string',
        'type' => 'string',
        'is_tokenized' => 'bool',
        'notes' => 'string',
        'added_on' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'cardholder_name' => null,
        'number' => null,
        'avs_address' => null,
        'avs_city' => null,
        'avs_state' => null,
        'avs_zip' => null,
        'avs_country' => null,
        'expiration_date' => null,
        'type' => null,
        'is_tokenized' => null,
        'notes' => null,
        'added_on' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'cardholder_name' => 'cardholderName',
        'number' => 'number',
        'avs_address' => 'avsAddress',
        'avs_city' => 'avsCity',
        'avs_state' => 'avsState',
        'avs_zip' => 'avsZip',
        'avs_country' => 'avsCountry',
        'expiration_date' => 'expirationDate',
        'type' => 'type',
        'is_tokenized' => 'isTokenized',
        'notes' => 'notes',
        'added_on' => 'addedOn'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'cardholder_name' => 'setCardholderName',
        'number' => 'setNumber',
        'avs_address' => 'setAvsAddress',
        'avs_city' => 'setAvsCity',
        'avs_state' => 'setAvsState',
        'avs_zip' => 'setAvsZip',
        'avs_country' => 'setAvsCountry',
        'expiration_date' => 'setExpirationDate',
        'type' => 'setType',
        'is_tokenized' => 'setIsTokenized',
        'notes' => 'setNotes',
        'added_on' => 'setAddedOn'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'cardholder_name' => 'getCardholderName',
        'number' => 'getNumber',
        'avs_address' => 'getAvsAddress',
        'avs_city' => 'getAvsCity',
        'avs_state' => 'getAvsState',
        'avs_zip' => 'getAvsZip',
        'avs_country' => 'getAvsCountry',
        'expiration_date' => 'getExpirationDate',
        'type' => 'getType',
        'is_tokenized' => 'getIsTokenized',
        'notes' => 'getNotes',
        'added_on' => 'getAddedOn'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_NOT_SET = 'NotSet';
    const TYPE_VISA = 'Visa';
    const TYPE_MASTER_CARD = 'MasterCard';
    const TYPE_AMERICAN_EXPRESS = 'AmericanExpress';
    const TYPE_DISCOVER = 'Discover';
    const TYPE_OTHER = 'Other';
    const TYPE_DINERS_CLUB = 'DinersClub';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_NOT_SET,
            self::TYPE_VISA,
            self::TYPE_MASTER_CARD,
            self::TYPE_AMERICAN_EXPRESS,
            self::TYPE_DISCOVER,
            self::TYPE_OTHER,
            self::TYPE_DINERS_CLUB,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['cardholder_name'] = isset($data['cardholder_name']) ? $data['cardholder_name'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['avs_address'] = isset($data['avs_address']) ? $data['avs_address'] : null;
        $this->container['avs_city'] = isset($data['avs_city']) ? $data['avs_city'] : null;
        $this->container['avs_state'] = isset($data['avs_state']) ? $data['avs_state'] : null;
        $this->container['avs_zip'] = isset($data['avs_zip']) ? $data['avs_zip'] : null;
        $this->container['avs_country'] = isset($data['avs_country']) ? $data['avs_country'] : null;
        $this->container['expiration_date'] = isset($data['expiration_date']) ? $data['expiration_date'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['is_tokenized'] = isset($data['is_tokenized']) ? $data['is_tokenized'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['added_on'] = isset($data['added_on']) ? $data['added_on'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cardholder_name'] === null) {
            $invalidProperties[] = "'cardholder_name' can't be null";
        }
        if ((mb_strlen($this->container['cardholder_name']) > 200)) {
            $invalidProperties[] = "invalid value for 'cardholder_name', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['number']) && (mb_strlen($this->container['number']) > 200)) {
            $invalidProperties[] = "invalid value for 'number', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['avs_address']) && (mb_strlen($this->container['avs_address']) > 100)) {
            $invalidProperties[] = "invalid value for 'avs_address', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['avs_city']) && (mb_strlen($this->container['avs_city']) > 100)) {
            $invalidProperties[] = "invalid value for 'avs_city', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['avs_state']) && (mb_strlen($this->container['avs_state']) > 50)) {
            $invalidProperties[] = "invalid value for 'avs_state', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['avs_zip']) && (mb_strlen($this->container['avs_zip']) > 50)) {
            $invalidProperties[] = "invalid value for 'avs_zip', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['avs_country'] === null) {
            $invalidProperties[] = "'avs_country' can't be null";
        }
        if ($this->container['expiration_date'] === null) {
            $invalidProperties[] = "'expiration_date' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets cardholder_name
     *
     * @return string
     */
    public function getCardholderName()
    {
        return $this->container['cardholder_name'];
    }

    /**
     * Sets cardholder_name
     *
     * @param string $cardholder_name cardholder_name
     *
     * @return $this
     */
    public function setCardholderName($cardholder_name)
    {
        if ((mb_strlen($cardholder_name) > 200)) {
            throw new \InvalidArgumentException('invalid length for $cardholder_name when calling CreditCard., must be smaller than or equal to 200.');
        }

        $this->container['cardholder_name'] = $cardholder_name;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        if (!is_null($number) && (mb_strlen($number) > 200)) {
            throw new \InvalidArgumentException('invalid length for $number when calling CreditCard., must be smaller than or equal to 200.');
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets avs_address
     *
     * @return string|null
     */
    public function getAvsAddress()
    {
        return $this->container['avs_address'];
    }

    /**
     * Sets avs_address
     *
     * @param string|null $avs_address avs_address
     *
     * @return $this
     */
    public function setAvsAddress($avs_address)
    {
        if (!is_null($avs_address) && (mb_strlen($avs_address) > 100)) {
            throw new \InvalidArgumentException('invalid length for $avs_address when calling CreditCard., must be smaller than or equal to 100.');
        }

        $this->container['avs_address'] = $avs_address;

        return $this;
    }

    /**
     * Gets avs_city
     *
     * @return string|null
     */
    public function getAvsCity()
    {
        return $this->container['avs_city'];
    }

    /**
     * Sets avs_city
     *
     * @param string|null $avs_city avs_city
     *
     * @return $this
     */
    public function setAvsCity($avs_city)
    {
        if (!is_null($avs_city) && (mb_strlen($avs_city) > 100)) {
            throw new \InvalidArgumentException('invalid length for $avs_city when calling CreditCard., must be smaller than or equal to 100.');
        }

        $this->container['avs_city'] = $avs_city;

        return $this;
    }

    /**
     * Gets avs_state
     *
     * @return string|null
     */
    public function getAvsState()
    {
        return $this->container['avs_state'];
    }

    /**
     * Sets avs_state
     *
     * @param string|null $avs_state For USA states, use ISO 3166-2:US
     *
     * @return $this
     */
    public function setAvsState($avs_state)
    {
        if (!is_null($avs_state) && (mb_strlen($avs_state) > 50)) {
            throw new \InvalidArgumentException('invalid length for $avs_state when calling CreditCard., must be smaller than or equal to 50.');
        }

        $this->container['avs_state'] = $avs_state;

        return $this;
    }

    /**
     * Gets avs_zip
     *
     * @return string|null
     */
    public function getAvsZip()
    {
        return $this->container['avs_zip'];
    }

    /**
     * Sets avs_zip
     *
     * @param string|null $avs_zip avs_zip
     *
     * @return $this
     */
    public function setAvsZip($avs_zip)
    {
        if (!is_null($avs_zip) && (mb_strlen($avs_zip) > 50)) {
            throw new \InvalidArgumentException('invalid length for $avs_zip when calling CreditCard., must be smaller than or equal to 50.');
        }

        $this->container['avs_zip'] = $avs_zip;

        return $this;
    }

    /**
     * Gets avs_country
     *
     * @return string
     */
    public function getAvsCountry()
    {
        return $this->container['avs_country'];
    }

    /**
     * Sets avs_country
     *
     * @param string $avs_country ISO 3166-1 alpha-2.
     *
     * @return $this
     */
    public function setAvsCountry($avs_country)
    {
        $this->container['avs_country'] = $avs_country;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return string
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param string $expiration_date expiration_date
     *
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Auto-calculated from the Number
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets is_tokenized
     *
     * @return bool|null
     */
    public function getIsTokenized()
    {
        return $this->container['is_tokenized'];
    }

    /**
     * Sets is_tokenized
     *
     * @param bool|null $is_tokenized Read-only field, whether the ccard was tokenized or not
     *
     * @return $this
     */
    public function setIsTokenized($is_tokenized)
    {
        $this->container['is_tokenized'] = $is_tokenized;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets added_on
     *
     * @return \DateTime|null
     */
    public function getAddedOn()
    {
        return $this->container['added_on'];
    }

    /**
     * Sets added_on
     *
     * @param \DateTime|null $added_on added_on
     *
     * @return $this
     */
    public function setAddedOn($added_on)
    {
        $this->container['added_on'] = $added_on;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


