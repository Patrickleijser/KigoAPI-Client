<?php
/**
 * BlockOut
 *
 * PHP version 5
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Patrick Leijser
 * @link     http://patrickleijser.nl
 */

/**
 * Kigo Core API
 *
 * https://www.kigoapis.com/core/v0.8/swagger/
 *
 * The version of the Kigo Core API: v0.8
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\Kigo\Model;

use \ArrayAccess;
use \Piksel\Kigo\ObjectSerializer;

/**
 * BlockOut Class Doc Comment
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Patrick Leijser
 * @link     http://patrickleijser.nl
 */
class BlockOut implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BlockOut';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'property_id' => 'int',
        'unit_id' => 'int',
        'check_in_date' => '\DateTime',
        'check_in_time_minutes_from_midnight' => 'int',
        'check_out_date' => '\DateTime',
        'check_out_time_minutes_from_midnight' => 'int',
        'private_notes' => 'string',
        'external_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'property_id' => 'int32',
        'unit_id' => 'int32',
        'check_in_date' => 'date',
        'check_in_time_minutes_from_midnight' => 'int32',
        'check_out_date' => 'date',
        'check_out_time_minutes_from_midnight' => 'int32',
        'private_notes' => null,
        'external_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'property_id' => 'propertyID',
        'unit_id' => 'unitID',
        'check_in_date' => 'checkInDate',
        'check_in_time_minutes_from_midnight' => 'checkInTimeMinutesFromMidnight',
        'check_out_date' => 'checkOutDate',
        'check_out_time_minutes_from_midnight' => 'checkOutTimeMinutesFromMidnight',
        'private_notes' => 'privateNotes',
        'external_id' => 'externalID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'property_id' => 'setPropertyId',
        'unit_id' => 'setUnitId',
        'check_in_date' => 'setCheckInDate',
        'check_in_time_minutes_from_midnight' => 'setCheckInTimeMinutesFromMidnight',
        'check_out_date' => 'setCheckOutDate',
        'check_out_time_minutes_from_midnight' => 'setCheckOutTimeMinutesFromMidnight',
        'private_notes' => 'setPrivateNotes',
        'external_id' => 'setExternalId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'property_id' => 'getPropertyId',
        'unit_id' => 'getUnitId',
        'check_in_date' => 'getCheckInDate',
        'check_in_time_minutes_from_midnight' => 'getCheckInTimeMinutesFromMidnight',
        'check_out_date' => 'getCheckOutDate',
        'check_out_time_minutes_from_midnight' => 'getCheckOutTimeMinutesFromMidnight',
        'private_notes' => 'getPrivateNotes',
        'external_id' => 'getExternalId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['property_id'] = isset($data['property_id']) ? $data['property_id'] : null;
        $this->container['unit_id'] = isset($data['unit_id']) ? $data['unit_id'] : null;
        $this->container['check_in_date'] = isset($data['check_in_date']) ? $data['check_in_date'] : null;
        $this->container['check_in_time_minutes_from_midnight'] = isset($data['check_in_time_minutes_from_midnight']) ? $data['check_in_time_minutes_from_midnight'] : null;
        $this->container['check_out_date'] = isset($data['check_out_date']) ? $data['check_out_date'] : null;
        $this->container['check_out_time_minutes_from_midnight'] = isset($data['check_out_time_minutes_from_midnight']) ? $data['check_out_time_minutes_from_midnight'] : null;
        $this->container['private_notes'] = isset($data['private_notes']) ? $data['private_notes'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['property_id'] === null) {
            $invalidProperties[] = "'property_id' can't be null";
        }
        if ($this->container['unit_id'] === null) {
            $invalidProperties[] = "'unit_id' can't be null";
        }
        if ($this->container['check_in_date'] === null) {
            $invalidProperties[] = "'check_in_date' can't be null";
        }
        if ($this->container['check_in_time_minutes_from_midnight'] === null) {
            $invalidProperties[] = "'check_in_time_minutes_from_midnight' can't be null";
        }
        if (($this->container['check_in_time_minutes_from_midnight'] > 1439)) {
            $invalidProperties[] = "invalid value for 'check_in_time_minutes_from_midnight', must be smaller than or equal to 1439.";
        }

        if (($this->container['check_in_time_minutes_from_midnight'] < 0)) {
            $invalidProperties[] = "invalid value for 'check_in_time_minutes_from_midnight', must be bigger than or equal to 0.";
        }

        if ($this->container['check_out_date'] === null) {
            $invalidProperties[] = "'check_out_date' can't be null";
        }
        if ($this->container['check_out_time_minutes_from_midnight'] === null) {
            $invalidProperties[] = "'check_out_time_minutes_from_midnight' can't be null";
        }
        if (($this->container['check_out_time_minutes_from_midnight'] > 1439)) {
            $invalidProperties[] = "invalid value for 'check_out_time_minutes_from_midnight', must be smaller than or equal to 1439.";
        }

        if (($this->container['check_out_time_minutes_from_midnight'] < 0)) {
            $invalidProperties[] = "invalid value for 'check_out_time_minutes_from_midnight', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['private_notes']) && (mb_strlen($this->container['private_notes']) > 4000)) {
            $invalidProperties[] = "invalid value for 'private_notes', the character length must be smaller than or equal to 4000.";
        }

        if (!is_null($this->container['external_id']) && (mb_strlen($this->container['external_id']) > 50)) {
            $invalidProperties[] = "invalid value for 'external_id', the character length must be smaller than or equal to 50.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets property_id
     *
     * @return int
     */
    public function getPropertyId()
    {
        return $this->container['property_id'];
    }

    /**
     * Sets property_id
     *
     * @param int $property_id property_id
     *
     * @return $this
     */
    public function setPropertyId($property_id)
    {
        $this->container['property_id'] = $property_id;

        return $this;
    }

    /**
     * Gets unit_id
     *
     * @return int
     */
    public function getUnitId()
    {
        return $this->container['unit_id'];
    }

    /**
     * Sets unit_id
     *
     * @param int $unit_id unit_id
     *
     * @return $this
     */
    public function setUnitId($unit_id)
    {
        $this->container['unit_id'] = $unit_id;

        return $this;
    }

    /**
     * Gets check_in_date
     *
     * @return \DateTime
     */
    public function getCheckInDate()
    {
        return $this->container['check_in_date'];
    }

    /**
     * Sets check_in_date
     *
     * @param \DateTime $check_in_date check_in_date
     *
     * @return $this
     */
    public function setCheckInDate($check_in_date)
    {
        $this->container['check_in_date'] = $check_in_date;

        return $this;
    }

    /**
     * Gets check_in_time_minutes_from_midnight
     *
     * @return int
     */
    public function getCheckInTimeMinutesFromMidnight()
    {
        return $this->container['check_in_time_minutes_from_midnight'];
    }

    /**
     * Sets check_in_time_minutes_from_midnight
     *
     * @param int $check_in_time_minutes_from_midnight Property's local timezone. Defaults to property's default check in time.
     *
     * @return $this
     */
    public function setCheckInTimeMinutesFromMidnight($check_in_time_minutes_from_midnight)
    {

        if (($check_in_time_minutes_from_midnight > 1439)) {
            throw new \InvalidArgumentException('invalid value for $check_in_time_minutes_from_midnight when calling BlockOut., must be smaller than or equal to 1439.');
        }
        if (($check_in_time_minutes_from_midnight < 0)) {
            throw new \InvalidArgumentException('invalid value for $check_in_time_minutes_from_midnight when calling BlockOut., must be bigger than or equal to 0.');
        }

        $this->container['check_in_time_minutes_from_midnight'] = $check_in_time_minutes_from_midnight;

        return $this;
    }

    /**
     * Gets check_out_date
     *
     * @return \DateTime
     */
    public function getCheckOutDate()
    {
        return $this->container['check_out_date'];
    }

    /**
     * Sets check_out_date
     *
     * @param \DateTime $check_out_date check_out_date
     *
     * @return $this
     */
    public function setCheckOutDate($check_out_date)
    {
        $this->container['check_out_date'] = $check_out_date;

        return $this;
    }

    /**
     * Gets check_out_time_minutes_from_midnight
     *
     * @return int
     */
    public function getCheckOutTimeMinutesFromMidnight()
    {
        return $this->container['check_out_time_minutes_from_midnight'];
    }

    /**
     * Sets check_out_time_minutes_from_midnight
     *
     * @param int $check_out_time_minutes_from_midnight Property's local timezone. Defaults to property's default check out time.
     *
     * @return $this
     */
    public function setCheckOutTimeMinutesFromMidnight($check_out_time_minutes_from_midnight)
    {

        if (($check_out_time_minutes_from_midnight > 1439)) {
            throw new \InvalidArgumentException('invalid value for $check_out_time_minutes_from_midnight when calling BlockOut., must be smaller than or equal to 1439.');
        }
        if (($check_out_time_minutes_from_midnight < 0)) {
            throw new \InvalidArgumentException('invalid value for $check_out_time_minutes_from_midnight when calling BlockOut., must be bigger than or equal to 0.');
        }

        $this->container['check_out_time_minutes_from_midnight'] = $check_out_time_minutes_from_midnight;

        return $this;
    }

    /**
     * Gets private_notes
     *
     * @return string|null
     */
    public function getPrivateNotes()
    {
        return $this->container['private_notes'];
    }

    /**
     * Sets private_notes
     *
     * @param string|null $private_notes private_notes
     *
     * @return $this
     */
    public function setPrivateNotes($private_notes)
    {
        if (!is_null($private_notes) && (mb_strlen($private_notes) > 4000)) {
            throw new \InvalidArgumentException('invalid length for $private_notes when calling BlockOut., must be smaller than or equal to 4000.');
        }

        $this->container['private_notes'] = $private_notes;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id external_id
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        if (!is_null($external_id) && (mb_strlen($external_id) > 50)) {
            throw new \InvalidArgumentException('invalid length for $external_id when calling BlockOut., must be smaller than or equal to 50.');
        }

        $this->container['external_id'] = $external_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


