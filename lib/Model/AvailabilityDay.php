<?php
/**
 * AvailabilityDay
 *
 * PHP version 5
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Patrick Leijser
 * @link     http://patrickleijser.nl
 */

/**
 * Kigo Core API
 *
 * https://www.kigoapis.com/core/v0.8/swagger/
 *
 * The version of the Kigo Core API: v0.8
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\Kigo\Model;

use \ArrayAccess;
use \Piksel\Kigo\ObjectSerializer;

/**
 * AvailabilityDay Class Doc Comment
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Patrick Leijser
 * @link     http://patrickleijser.nl
 */
class AvailabilityDay implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AvailabilityDay';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'unit_count' => '\Piksel\Kigo\Model\AvailabilityDayUnitCount',
        'closed_to_arrival' => 'bool',
        'closed_to_departure' => 'bool',
        'daily_price' => 'double',
        'date' => '\DateTime',
        'min_nights' => 'int',
        'max_nights' => 'int',
        'notes' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'unit_count' => null,
        'closed_to_arrival' => null,
        'closed_to_departure' => null,
        'daily_price' => 'double',
        'date' => 'date',
        'min_nights' => 'int32',
        'max_nights' => 'int32',
        'notes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'unit_count' => 'unitCount',
        'closed_to_arrival' => 'closedToArrival',
        'closed_to_departure' => 'closedToDeparture',
        'daily_price' => 'dailyPrice',
        'date' => 'date',
        'min_nights' => 'minNights',
        'max_nights' => 'maxNights',
        'notes' => 'notes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'unit_count' => 'setUnitCount',
        'closed_to_arrival' => 'setClosedToArrival',
        'closed_to_departure' => 'setClosedToDeparture',
        'daily_price' => 'setDailyPrice',
        'date' => 'setDate',
        'min_nights' => 'setMinNights',
        'max_nights' => 'setMaxNights',
        'notes' => 'setNotes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'unit_count' => 'getUnitCount',
        'closed_to_arrival' => 'getClosedToArrival',
        'closed_to_departure' => 'getClosedToDeparture',
        'daily_price' => 'getDailyPrice',
        'date' => 'getDate',
        'min_nights' => 'getMinNights',
        'max_nights' => 'getMaxNights',
        'notes' => 'getNotes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['unit_count'] = isset($data['unit_count']) ? $data['unit_count'] : null;
        $this->container['closed_to_arrival'] = isset($data['closed_to_arrival']) ? $data['closed_to_arrival'] : null;
        $this->container['closed_to_departure'] = isset($data['closed_to_departure']) ? $data['closed_to_departure'] : null;
        $this->container['daily_price'] = isset($data['daily_price']) ? $data['daily_price'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['min_nights'] = isset($data['min_nights']) ? $data['min_nights'] : null;
        $this->container['max_nights'] = isset($data['max_nights']) ? $data['max_nights'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets unit_count
     *
     * @return \Piksel\Kigo\Model\AvailabilityDayUnitCount|null
     */
    public function getUnitCount()
    {
        return $this->container['unit_count'];
    }

    /**
     * Sets unit_count
     *
     * @param \Piksel\Kigo\Model\AvailabilityDayUnitCount|null $unit_count unit_count
     *
     * @return $this
     */
    public function setUnitCount($unit_count)
    {
        $this->container['unit_count'] = $unit_count;

        return $this;
    }

    /**
     * Gets closed_to_arrival
     *
     * @return bool|null
     */
    public function getClosedToArrival()
    {
        return $this->container['closed_to_arrival'];
    }

    /**
     * Sets closed_to_arrival
     *
     * @param bool|null $closed_to_arrival closed_to_arrival
     *
     * @return $this
     */
    public function setClosedToArrival($closed_to_arrival)
    {
        $this->container['closed_to_arrival'] = $closed_to_arrival;

        return $this;
    }

    /**
     * Gets closed_to_departure
     *
     * @return bool|null
     */
    public function getClosedToDeparture()
    {
        return $this->container['closed_to_departure'];
    }

    /**
     * Sets closed_to_departure
     *
     * @param bool|null $closed_to_departure closed_to_departure
     *
     * @return $this
     */
    public function setClosedToDeparture($closed_to_departure)
    {
        $this->container['closed_to_departure'] = $closed_to_departure;

        return $this;
    }

    /**
     * Gets daily_price
     *
     * @return double|null
     */
    public function getDailyPrice()
    {
        return $this->container['daily_price'];
    }

    /**
     * Sets daily_price
     *
     * @param double|null $daily_price daily_price
     *
     * @return $this
     */
    public function setDailyPrice($daily_price)
    {
        $this->container['daily_price'] = $daily_price;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets min_nights
     *
     * @return int|null
     */
    public function getMinNights()
    {
        return $this->container['min_nights'];
    }

    /**
     * Sets min_nights
     *
     * @param int|null $min_nights min_nights
     *
     * @return $this
     */
    public function setMinNights($min_nights)
    {
        $this->container['min_nights'] = $min_nights;

        return $this;
    }

    /**
     * Gets max_nights
     *
     * @return int|null
     */
    public function getMaxNights()
    {
        return $this->container['max_nights'];
    }

    /**
     * Sets max_nights
     *
     * @param int|null $max_nights max_nights
     *
     * @return $this
     */
    public function setMaxNights($max_nights)
    {
        $this->container['max_nights'] = $max_nights;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


