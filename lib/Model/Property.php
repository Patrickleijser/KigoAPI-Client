<?php
/**
 * Property
 *
 * PHP version 5
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Patrick Leijser
 * @link     http://patrickleijser.nl
 */

/**
 * Kigo Core API
 *
 * https://www.kigoapis.com/core/v0.8/swagger/
 *
 * The version of the Kigo Core API: v0.8
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\Kigo\Model;

use \ArrayAccess;
use \Piksel\Kigo\ObjectSerializer;

/**
 * Property Class Doc Comment
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Patrick Leijser
 * @link     http://patrickleijser.nl
 */
class Property implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Property';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'category_id' => 'int',
        'category_type' => 'string',
        'external_id' => 'string',
        'last_modified_date' => '\DateTime',
        'solution_id' => 'int',
        'private_name' => 'string',
        'floor' => 'int',
        'stories' => 'int',
        'min_stay' => 'int',
        'year_built' => 'int',
        'garage_spaces' => 'int',
        'parking_spaces' => 'int',
        'unit_size_sq_ft' => 'int',
        'lot_size_sq_ft' => 'int',
        'internal_notes' => 'string',
        'status' => 'string',
        'bedroom_count' => 'int',
        'bedrooms' => '\Piksel\Kigo\Model\PropertyBedroom[]',
        'bathrooms' => 'double',
        'sleeps' => 'int',
        'address' => '\Piksel\Kigo\Model\Address',
        'units' => '\Piksel\Kigo\Model\Unit[]',
        'media' => '\Piksel\Kigo\Model\PropertyMedia',
        'primary_image' => '\Piksel\Kigo\Model\Image',
        'descriptions' => '\Piksel\Kigo\Model\PropertyDescriptions[]',
        'amenity_ids' => 'int[]',
        'amenities' => '\Piksel\Kigo\Model\PropertyAmenity[]',
        'availability' => '\Piksel\Kigo\Model\Availability',
        'rates' => '\Piksel\Kigo\Model\PropertyRate[]',
        'visibility' => '\Piksel\Kigo\Model\PropertyVisibility',
        'reviews' => '\Piksel\Kigo\Model\PropertyReview[]',
        'solution' => '\Piksel\Kigo\Model\Solution',
        'localized' => '\Piksel\Kigo\Model\PropertyLocalizedData'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'category_id' => 'int32',
        'category_type' => null,
        'external_id' => null,
        'last_modified_date' => 'date-time',
        'solution_id' => 'int32',
        'private_name' => null,
        'floor' => 'int32',
        'stories' => 'int32',
        'min_stay' => 'int32',
        'year_built' => 'int32',
        'garage_spaces' => 'int32',
        'parking_spaces' => 'int32',
        'unit_size_sq_ft' => 'int32',
        'lot_size_sq_ft' => 'int32',
        'internal_notes' => null,
        'status' => null,
        'bedroom_count' => 'int32',
        'bedrooms' => null,
        'bathrooms' => 'double',
        'sleeps' => 'int32',
        'address' => null,
        'units' => null,
        'media' => null,
        'primary_image' => null,
        'descriptions' => null,
        'amenity_ids' => 'int32',
        'amenities' => null,
        'availability' => null,
        'rates' => null,
        'visibility' => null,
        'reviews' => null,
        'solution' => null,
        'localized' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'category_id' => 'categoryID',
        'category_type' => 'categoryType',
        'external_id' => 'externalID',
        'last_modified_date' => 'lastModifiedDate',
        'solution_id' => 'solutionID',
        'private_name' => 'privateName',
        'floor' => 'floor',
        'stories' => 'stories',
        'min_stay' => 'minStay',
        'year_built' => 'yearBuilt',
        'garage_spaces' => 'garageSpaces',
        'parking_spaces' => 'parkingSpaces',
        'unit_size_sq_ft' => 'unitSizeSqFt',
        'lot_size_sq_ft' => 'lotSizeSqFt',
        'internal_notes' => 'internalNotes',
        'status' => 'status',
        'bedroom_count' => 'bedroomCount',
        'bedrooms' => 'bedrooms',
        'bathrooms' => 'bathrooms',
        'sleeps' => 'sleeps',
        'address' => 'address',
        'units' => 'units',
        'media' => 'media',
        'primary_image' => 'primaryImage',
        'descriptions' => 'descriptions',
        'amenity_ids' => 'amenityIds',
        'amenities' => 'amenities',
        'availability' => 'availability',
        'rates' => 'rates',
        'visibility' => 'visibility',
        'reviews' => 'reviews',
        'solution' => 'solution',
        'localized' => 'localized'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'category_id' => 'setCategoryId',
        'category_type' => 'setCategoryType',
        'external_id' => 'setExternalId',
        'last_modified_date' => 'setLastModifiedDate',
        'solution_id' => 'setSolutionId',
        'private_name' => 'setPrivateName',
        'floor' => 'setFloor',
        'stories' => 'setStories',
        'min_stay' => 'setMinStay',
        'year_built' => 'setYearBuilt',
        'garage_spaces' => 'setGarageSpaces',
        'parking_spaces' => 'setParkingSpaces',
        'unit_size_sq_ft' => 'setUnitSizeSqFt',
        'lot_size_sq_ft' => 'setLotSizeSqFt',
        'internal_notes' => 'setInternalNotes',
        'status' => 'setStatus',
        'bedroom_count' => 'setBedroomCount',
        'bedrooms' => 'setBedrooms',
        'bathrooms' => 'setBathrooms',
        'sleeps' => 'setSleeps',
        'address' => 'setAddress',
        'units' => 'setUnits',
        'media' => 'setMedia',
        'primary_image' => 'setPrimaryImage',
        'descriptions' => 'setDescriptions',
        'amenity_ids' => 'setAmenityIds',
        'amenities' => 'setAmenities',
        'availability' => 'setAvailability',
        'rates' => 'setRates',
        'visibility' => 'setVisibility',
        'reviews' => 'setReviews',
        'solution' => 'setSolution',
        'localized' => 'setLocalized'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'category_id' => 'getCategoryId',
        'category_type' => 'getCategoryType',
        'external_id' => 'getExternalId',
        'last_modified_date' => 'getLastModifiedDate',
        'solution_id' => 'getSolutionId',
        'private_name' => 'getPrivateName',
        'floor' => 'getFloor',
        'stories' => 'getStories',
        'min_stay' => 'getMinStay',
        'year_built' => 'getYearBuilt',
        'garage_spaces' => 'getGarageSpaces',
        'parking_spaces' => 'getParkingSpaces',
        'unit_size_sq_ft' => 'getUnitSizeSqFt',
        'lot_size_sq_ft' => 'getLotSizeSqFt',
        'internal_notes' => 'getInternalNotes',
        'status' => 'getStatus',
        'bedroom_count' => 'getBedroomCount',
        'bedrooms' => 'getBedrooms',
        'bathrooms' => 'getBathrooms',
        'sleeps' => 'getSleeps',
        'address' => 'getAddress',
        'units' => 'getUnits',
        'media' => 'getMedia',
        'primary_image' => 'getPrimaryImage',
        'descriptions' => 'getDescriptions',
        'amenity_ids' => 'getAmenityIds',
        'amenities' => 'getAmenities',
        'availability' => 'getAvailability',
        'rates' => 'getRates',
        'visibility' => 'getVisibility',
        'reviews' => 'getReviews',
        'solution' => 'getSolution',
        'localized' => 'getLocalized'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_ACTIVE_FOR_RENT = 'ActiveForRent';
    const STATUS_INACTIVE = 'Inactive';
    const STATUS_ENTERED_PENDING_APPROVAL = 'EnteredPendingApproval';
    const STATUS_MARKED_FOR_DELETION = 'MarkedForDeletion';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE_FOR_RENT,
            self::STATUS_INACTIVE,
            self::STATUS_ENTERED_PENDING_APPROVAL,
            self::STATUS_MARKED_FOR_DELETION,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['category_id'] = isset($data['category_id']) ? $data['category_id'] : null;
        $this->container['category_type'] = isset($data['category_type']) ? $data['category_type'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['last_modified_date'] = isset($data['last_modified_date']) ? $data['last_modified_date'] : null;
        $this->container['solution_id'] = isset($data['solution_id']) ? $data['solution_id'] : null;
        $this->container['private_name'] = isset($data['private_name']) ? $data['private_name'] : null;
        $this->container['floor'] = isset($data['floor']) ? $data['floor'] : null;
        $this->container['stories'] = isset($data['stories']) ? $data['stories'] : null;
        $this->container['min_stay'] = isset($data['min_stay']) ? $data['min_stay'] : null;
        $this->container['year_built'] = isset($data['year_built']) ? $data['year_built'] : null;
        $this->container['garage_spaces'] = isset($data['garage_spaces']) ? $data['garage_spaces'] : null;
        $this->container['parking_spaces'] = isset($data['parking_spaces']) ? $data['parking_spaces'] : null;
        $this->container['unit_size_sq_ft'] = isset($data['unit_size_sq_ft']) ? $data['unit_size_sq_ft'] : null;
        $this->container['lot_size_sq_ft'] = isset($data['lot_size_sq_ft']) ? $data['lot_size_sq_ft'] : null;
        $this->container['internal_notes'] = isset($data['internal_notes']) ? $data['internal_notes'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['bedroom_count'] = isset($data['bedroom_count']) ? $data['bedroom_count'] : null;
        $this->container['bedrooms'] = isset($data['bedrooms']) ? $data['bedrooms'] : null;
        $this->container['bathrooms'] = isset($data['bathrooms']) ? $data['bathrooms'] : null;
        $this->container['sleeps'] = isset($data['sleeps']) ? $data['sleeps'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['units'] = isset($data['units']) ? $data['units'] : null;
        $this->container['media'] = isset($data['media']) ? $data['media'] : null;
        $this->container['primary_image'] = isset($data['primary_image']) ? $data['primary_image'] : null;
        $this->container['descriptions'] = isset($data['descriptions']) ? $data['descriptions'] : null;
        $this->container['amenity_ids'] = isset($data['amenity_ids']) ? $data['amenity_ids'] : null;
        $this->container['amenities'] = isset($data['amenities']) ? $data['amenities'] : null;
        $this->container['availability'] = isset($data['availability']) ? $data['availability'] : null;
        $this->container['rates'] = isset($data['rates']) ? $data['rates'] : null;
        $this->container['visibility'] = isset($data['visibility']) ? $data['visibility'] : null;
        $this->container['reviews'] = isset($data['reviews']) ? $data['reviews'] : null;
        $this->container['solution'] = isset($data['solution']) ? $data['solution'] : null;
        $this->container['localized'] = isset($data['localized']) ? $data['localized'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['category_id'] === null) {
            $invalidProperties[] = "'category_id' can't be null";
        }
        if ($this->container['private_name'] === null) {
            $invalidProperties[] = "'private_name' can't be null";
        }
        if (!is_null($this->container['stories']) && ($this->container['stories'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'stories', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['stories']) && ($this->container['stories'] < 0)) {
            $invalidProperties[] = "invalid value for 'stories', must be bigger than or equal to 0.";
        }

        if ($this->container['min_stay'] === null) {
            $invalidProperties[] = "'min_stay' can't be null";
        }
        if (($this->container['min_stay'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'min_stay', must be smaller than or equal to 2147483647.";
        }

        if (($this->container['min_stay'] < 1)) {
            $invalidProperties[] = "invalid value for 'min_stay', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['year_built']) && ($this->container['year_built'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'year_built', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['year_built']) && ($this->container['year_built'] < 0)) {
            $invalidProperties[] = "invalid value for 'year_built', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['garage_spaces']) && ($this->container['garage_spaces'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'garage_spaces', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['garage_spaces']) && ($this->container['garage_spaces'] < 0)) {
            $invalidProperties[] = "invalid value for 'garage_spaces', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['parking_spaces']) && ($this->container['parking_spaces'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'parking_spaces', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['parking_spaces']) && ($this->container['parking_spaces'] < 0)) {
            $invalidProperties[] = "invalid value for 'parking_spaces', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['internal_notes']) && (mb_strlen($this->container['internal_notes']) > 500)) {
            $invalidProperties[] = "invalid value for 'internal_notes', the character length must be smaller than or equal to 500.";
        }

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['bedrooms'] === null) {
            $invalidProperties[] = "'bedrooms' can't be null";
        }
        if (!is_null($this->container['bathrooms']) && ($this->container['bathrooms'] < 0)) {
            $invalidProperties[] = "invalid value for 'bathrooms', must be bigger than or equal to 0.";
        }

        if ($this->container['sleeps'] === null) {
            $invalidProperties[] = "'sleeps' can't be null";
        }
        if (($this->container['sleeps'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'sleeps', must be smaller than or equal to 2147483647.";
        }

        if (($this->container['sleeps'] < 1)) {
            $invalidProperties[] = "invalid value for 'sleeps', must be bigger than or equal to 1.";
        }

        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ($this->container['amenity_ids'] === null) {
            $invalidProperties[] = "'amenity_ids' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return int
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param int $category_id category_id
     *
     * @return $this
     */
    public function setCategoryId($category_id)
    {
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets category_type
     *
     * @return string|null
     */
    public function getCategoryType()
    {
        return $this->container['category_type'];
    }

    /**
     * Sets category_type
     *
     * @param string|null $category_type category_type
     *
     * @return $this
     */
    public function setCategoryType($category_type)
    {
        $this->container['category_type'] = $category_type;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id external_id
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return \DateTime|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param \DateTime|null $last_modified_date last_modified_date
     *
     * @return $this
     */
    public function setLastModifiedDate($last_modified_date)
    {
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets solution_id
     *
     * @return int|null
     */
    public function getSolutionId()
    {
        return $this->container['solution_id'];
    }

    /**
     * Sets solution_id
     *
     * @param int|null $solution_id solution_id
     *
     * @return $this
     */
    public function setSolutionId($solution_id)
    {
        $this->container['solution_id'] = $solution_id;

        return $this;
    }

    /**
     * Gets private_name
     *
     * @return string
     */
    public function getPrivateName()
    {
        return $this->container['private_name'];
    }

    /**
     * Sets private_name
     *
     * @param string $private_name private_name
     *
     * @return $this
     */
    public function setPrivateName($private_name)
    {
        $this->container['private_name'] = $private_name;

        return $this;
    }

    /**
     * Gets floor
     *
     * @return int|null
     */
    public function getFloor()
    {
        return $this->container['floor'];
    }

    /**
     * Sets floor
     *
     * @param int|null $floor floor
     *
     * @return $this
     */
    public function setFloor($floor)
    {
        $this->container['floor'] = $floor;

        return $this;
    }

    /**
     * Gets stories
     *
     * @return int|null
     */
    public function getStories()
    {
        return $this->container['stories'];
    }

    /**
     * Sets stories
     *
     * @param int|null $stories stories
     *
     * @return $this
     */
    public function setStories($stories)
    {

        if (!is_null($stories) && ($stories > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $stories when calling Property., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($stories) && ($stories < 0)) {
            throw new \InvalidArgumentException('invalid value for $stories when calling Property., must be bigger than or equal to 0.');
        }

        $this->container['stories'] = $stories;

        return $this;
    }

    /**
     * Gets min_stay
     *
     * @return int
     */
    public function getMinStay()
    {
        return $this->container['min_stay'];
    }

    /**
     * Sets min_stay
     *
     * @param int $min_stay min_stay
     *
     * @return $this
     */
    public function setMinStay($min_stay)
    {

        if (($min_stay > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $min_stay when calling Property., must be smaller than or equal to 2147483647.');
        }
        if (($min_stay < 1)) {
            throw new \InvalidArgumentException('invalid value for $min_stay when calling Property., must be bigger than or equal to 1.');
        }

        $this->container['min_stay'] = $min_stay;

        return $this;
    }

    /**
     * Gets year_built
     *
     * @return int|null
     */
    public function getYearBuilt()
    {
        return $this->container['year_built'];
    }

    /**
     * Sets year_built
     *
     * @param int|null $year_built year_built
     *
     * @return $this
     */
    public function setYearBuilt($year_built)
    {

        if (!is_null($year_built) && ($year_built > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $year_built when calling Property., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($year_built) && ($year_built < 0)) {
            throw new \InvalidArgumentException('invalid value for $year_built when calling Property., must be bigger than or equal to 0.');
        }

        $this->container['year_built'] = $year_built;

        return $this;
    }

    /**
     * Gets garage_spaces
     *
     * @return int|null
     */
    public function getGarageSpaces()
    {
        return $this->container['garage_spaces'];
    }

    /**
     * Sets garage_spaces
     *
     * @param int|null $garage_spaces garage_spaces
     *
     * @return $this
     */
    public function setGarageSpaces($garage_spaces)
    {

        if (!is_null($garage_spaces) && ($garage_spaces > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $garage_spaces when calling Property., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($garage_spaces) && ($garage_spaces < 0)) {
            throw new \InvalidArgumentException('invalid value for $garage_spaces when calling Property., must be bigger than or equal to 0.');
        }

        $this->container['garage_spaces'] = $garage_spaces;

        return $this;
    }

    /**
     * Gets parking_spaces
     *
     * @return int|null
     */
    public function getParkingSpaces()
    {
        return $this->container['parking_spaces'];
    }

    /**
     * Sets parking_spaces
     *
     * @param int|null $parking_spaces parking_spaces
     *
     * @return $this
     */
    public function setParkingSpaces($parking_spaces)
    {

        if (!is_null($parking_spaces) && ($parking_spaces > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $parking_spaces when calling Property., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($parking_spaces) && ($parking_spaces < 0)) {
            throw new \InvalidArgumentException('invalid value for $parking_spaces when calling Property., must be bigger than or equal to 0.');
        }

        $this->container['parking_spaces'] = $parking_spaces;

        return $this;
    }

    /**
     * Gets unit_size_sq_ft
     *
     * @return int|null
     */
    public function getUnitSizeSqFt()
    {
        return $this->container['unit_size_sq_ft'];
    }

    /**
     * Sets unit_size_sq_ft
     *
     * @param int|null $unit_size_sq_ft unit_size_sq_ft
     *
     * @return $this
     */
    public function setUnitSizeSqFt($unit_size_sq_ft)
    {
        $this->container['unit_size_sq_ft'] = $unit_size_sq_ft;

        return $this;
    }

    /**
     * Gets lot_size_sq_ft
     *
     * @return int|null
     */
    public function getLotSizeSqFt()
    {
        return $this->container['lot_size_sq_ft'];
    }

    /**
     * Sets lot_size_sq_ft
     *
     * @param int|null $lot_size_sq_ft lot_size_sq_ft
     *
     * @return $this
     */
    public function setLotSizeSqFt($lot_size_sq_ft)
    {
        $this->container['lot_size_sq_ft'] = $lot_size_sq_ft;

        return $this;
    }

    /**
     * Gets internal_notes
     *
     * @return string|null
     */
    public function getInternalNotes()
    {
        return $this->container['internal_notes'];
    }

    /**
     * Sets internal_notes
     *
     * @param string|null $internal_notes internal_notes
     *
     * @return $this
     */
    public function setInternalNotes($internal_notes)
    {
        if (!is_null($internal_notes) && (mb_strlen($internal_notes) > 500)) {
            throw new \InvalidArgumentException('invalid length for $internal_notes when calling Property., must be smaller than or equal to 500.');
        }

        $this->container['internal_notes'] = $internal_notes;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets bedroom_count
     *
     * @return int|null
     */
    public function getBedroomCount()
    {
        return $this->container['bedroom_count'];
    }

    /**
     * Sets bedroom_count
     *
     * @param int|null $bedroom_count When updating, send a Bedrooms arrays that will auto-set the BedroomCount value
     *
     * @return $this
     */
    public function setBedroomCount($bedroom_count)
    {
        $this->container['bedroom_count'] = $bedroom_count;

        return $this;
    }

    /**
     * Gets bedrooms
     *
     * @return \Piksel\Kigo\Model\PropertyBedroom[]
     */
    public function getBedrooms()
    {
        return $this->container['bedrooms'];
    }

    /**
     * Sets bedrooms
     *
     * @param \Piksel\Kigo\Model\PropertyBedroom[] $bedrooms bedrooms
     *
     * @return $this
     */
    public function setBedrooms($bedrooms)
    {
        $this->container['bedrooms'] = $bedrooms;

        return $this;
    }

    /**
     * Gets bathrooms
     *
     * @return double|null
     */
    public function getBathrooms()
    {
        return $this->container['bathrooms'];
    }

    /**
     * Sets bathrooms
     *
     * @param double|null $bathrooms bathrooms
     *
     * @return $this
     */
    public function setBathrooms($bathrooms)
    {

        if (!is_null($bathrooms) && ($bathrooms < 0)) {
            throw new \InvalidArgumentException('invalid value for $bathrooms when calling Property., must be bigger than or equal to 0.');
        }

        $this->container['bathrooms'] = $bathrooms;

        return $this;
    }

    /**
     * Gets sleeps
     *
     * @return int
     */
    public function getSleeps()
    {
        return $this->container['sleeps'];
    }

    /**
     * Sets sleeps
     *
     * @param int $sleeps sleeps
     *
     * @return $this
     */
    public function setSleeps($sleeps)
    {

        if (($sleeps > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $sleeps when calling Property., must be smaller than or equal to 2147483647.');
        }
        if (($sleeps < 1)) {
            throw new \InvalidArgumentException('invalid value for $sleeps when calling Property., must be bigger than or equal to 1.');
        }

        $this->container['sleeps'] = $sleeps;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Piksel\Kigo\Model\Address
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Piksel\Kigo\Model\Address $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets units
     *
     * @return \Piksel\Kigo\Model\Unit[]|null
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param \Piksel\Kigo\Model\Unit[]|null $units units
     *
     * @return $this
     */
    public function setUnits($units)
    {
        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets media
     *
     * @return \Piksel\Kigo\Model\PropertyMedia|null
     */
    public function getMedia()
    {
        return $this->container['media'];
    }

    /**
     * Sets media
     *
     * @param \Piksel\Kigo\Model\PropertyMedia|null $media media
     *
     * @return $this
     */
    public function setMedia($media)
    {
        $this->container['media'] = $media;

        return $this;
    }

    /**
     * Gets primary_image
     *
     * @return \Piksel\Kigo\Model\Image|null
     */
    public function getPrimaryImage()
    {
        return $this->container['primary_image'];
    }

    /**
     * Sets primary_image
     *
     * @param \Piksel\Kigo\Model\Image|null $primary_image primary_image
     *
     * @return $this
     */
    public function setPrimaryImage($primary_image)
    {
        $this->container['primary_image'] = $primary_image;

        return $this;
    }

    /**
     * Gets descriptions
     *
     * @return \Piksel\Kigo\Model\PropertyDescriptions[]|null
     */
    public function getDescriptions()
    {
        return $this->container['descriptions'];
    }

    /**
     * Sets descriptions
     *
     * @param \Piksel\Kigo\Model\PropertyDescriptions[]|null $descriptions Shows descriptions in ALL available Locales. Included with option Descriptions
     *
     * @return $this
     */
    public function setDescriptions($descriptions)
    {
        $this->container['descriptions'] = $descriptions;

        return $this;
    }

    /**
     * Gets amenity_ids
     *
     * @return int[]
     */
    public function getAmenityIds()
    {
        return $this->container['amenity_ids'];
    }

    /**
     * Sets amenity_ids
     *
     * @param int[] $amenity_ids List of Amenity IDs selected for this Property. Works with GET/POST/PUT requests. This field is always required (e.g., if an empty array is given, all amenities will be deleted from the property).
     *
     * @return $this
     */
    public function setAmenityIds($amenity_ids)
    {
        $this->container['amenity_ids'] = $amenity_ids;

        return $this;
    }

    /**
     * Gets amenities
     *
     * @return \Piksel\Kigo\Model\PropertyAmenity[]|null
     */
    public function getAmenities()
    {
        return $this->container['amenities'];
    }

    /**
     * Sets amenities
     *
     * @param \Piksel\Kigo\Model\PropertyAmenity[]|null $amenities Included with option Amenities
     *
     * @return $this
     */
    public function setAmenities($amenities)
    {
        $this->container['amenities'] = $amenities;

        return $this;
    }

    /**
     * Gets availability
     *
     * @return \Piksel\Kigo\Model\Availability|null
     */
    public function getAvailability()
    {
        return $this->container['availability'];
    }

    /**
     * Sets availability
     *
     * @param \Piksel\Kigo\Model\Availability|null $availability availability
     *
     * @return $this
     */
    public function setAvailability($availability)
    {
        $this->container['availability'] = $availability;

        return $this;
    }

    /**
     * Gets rates
     *
     * @return \Piksel\Kigo\Model\PropertyRate[]|null
     */
    public function getRates()
    {
        return $this->container['rates'];
    }

    /**
     * Sets rates
     *
     * @param \Piksel\Kigo\Model\PropertyRate[]|null $rates Included with option Rates
     *
     * @return $this
     */
    public function setRates($rates)
    {
        $this->container['rates'] = $rates;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return \Piksel\Kigo\Model\PropertyVisibility|null
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param \Piksel\Kigo\Model\PropertyVisibility|null $visibility visibility
     *
     * @return $this
     */
    public function setVisibility($visibility)
    {
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets reviews
     *
     * @return \Piksel\Kigo\Model\PropertyReview[]|null
     */
    public function getReviews()
    {
        return $this->container['reviews'];
    }

    /**
     * Sets reviews
     *
     * @param \Piksel\Kigo\Model\PropertyReview[]|null $reviews Included with option Reviews
     *
     * @return $this
     */
    public function setReviews($reviews)
    {
        $this->container['reviews'] = $reviews;

        return $this;
    }

    /**
     * Gets solution
     *
     * @return \Piksel\Kigo\Model\Solution|null
     */
    public function getSolution()
    {
        return $this->container['solution'];
    }

    /**
     * Sets solution
     *
     * @param \Piksel\Kigo\Model\Solution|null $solution solution
     *
     * @return $this
     */
    public function setSolution($solution)
    {
        $this->container['solution'] = $solution;

        return $this;
    }

    /**
     * Gets localized
     *
     * @return \Piksel\Kigo\Model\PropertyLocalizedData|null
     */
    public function getLocalized()
    {
        return $this->container['localized'];
    }

    /**
     * Sets localized
     *
     * @param \Piksel\Kigo\Model\PropertyLocalizedData|null $localized localized
     *
     * @return $this
     */
    public function setLocalized($localized)
    {
        $this->container['localized'] = $localized;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


