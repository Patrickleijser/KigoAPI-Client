<?php
/**
 * Unit
 *
 * PHP version 5
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Patrick Leijser
 * @link     http://patrickleijser.nl
 */

/**
 * Kigo Core API
 *
 * https://www.kigoapis.com/core/v0.8/swagger/
 *
 * The version of the Kigo Core API: v0.8
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\Kigo\Model;

use \ArrayAccess;
use \Piksel\Kigo\ObjectSerializer;

/**
 * Unit Class Doc Comment
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Patrick Leijser
 * @link     http://patrickleijser.nl
 */
class Unit implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Unit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'owner_account_id' => 'int',
        'owner' => '\Piksel\Kigo\Model\Person',
        'sun_rise_date' => '\DateTime',
        'sun_set_date' => '\DateTime',
        'permit_or_tax_id' => 'string',
        'external_id' => 'string',
        'property_unit_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'name' => null,
        'owner_account_id' => 'int32',
        'owner' => null,
        'sun_rise_date' => 'date',
        'sun_set_date' => 'date',
        'permit_or_tax_id' => null,
        'external_id' => null,
        'property_unit_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'owner_account_id' => 'ownerAccountID',
        'owner' => 'owner',
        'sun_rise_date' => 'sunRiseDate',
        'sun_set_date' => 'sunSetDate',
        'permit_or_tax_id' => 'permitOrTaxID',
        'external_id' => 'externalID',
        'property_unit_id' => 'propertyUnitID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'owner_account_id' => 'setOwnerAccountId',
        'owner' => 'setOwner',
        'sun_rise_date' => 'setSunRiseDate',
        'sun_set_date' => 'setSunSetDate',
        'permit_or_tax_id' => 'setPermitOrTaxId',
        'external_id' => 'setExternalId',
        'property_unit_id' => 'setPropertyUnitId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'owner_account_id' => 'getOwnerAccountId',
        'owner' => 'getOwner',
        'sun_rise_date' => 'getSunRiseDate',
        'sun_set_date' => 'getSunSetDate',
        'permit_or_tax_id' => 'getPermitOrTaxId',
        'external_id' => 'getExternalId',
        'property_unit_id' => 'getPropertyUnitId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['owner_account_id'] = isset($data['owner_account_id']) ? $data['owner_account_id'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['sun_rise_date'] = isset($data['sun_rise_date']) ? $data['sun_rise_date'] : null;
        $this->container['sun_set_date'] = isset($data['sun_set_date']) ? $data['sun_set_date'] : null;
        $this->container['permit_or_tax_id'] = isset($data['permit_or_tax_id']) ? $data['permit_or_tax_id'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['property_unit_id'] = isset($data['property_unit_id']) ? $data['property_unit_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['permit_or_tax_id']) && (mb_strlen($this->container['permit_or_tax_id']) > 255)) {
            $invalidProperties[] = "invalid value for 'permit_or_tax_id', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['external_id']) && (mb_strlen($this->container['external_id']) > 50)) {
            $invalidProperties[] = "invalid value for 'external_id', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['property_unit_id'] === null) {
            $invalidProperties[] = "'property_unit_id' can't be null";
        }
        if ((mb_strlen($this->container['property_unit_id']) > 20)) {
            $invalidProperties[] = "invalid value for 'property_unit_id', the character length must be smaller than or equal to 20.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Unit., must be smaller than or equal to 100.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets owner_account_id
     *
     * @return int|null
     */
    public function getOwnerAccountId()
    {
        return $this->container['owner_account_id'];
    }

    /**
     * Sets owner_account_id
     *
     * @param int|null $owner_account_id owner_account_id
     *
     * @return $this
     */
    public function setOwnerAccountId($owner_account_id)
    {
        $this->container['owner_account_id'] = $owner_account_id;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \Piksel\Kigo\Model\Person|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \Piksel\Kigo\Model\Person|null $owner owner
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets sun_rise_date
     *
     * @return \DateTime|null
     */
    public function getSunRiseDate()
    {
        return $this->container['sun_rise_date'];
    }

    /**
     * Sets sun_rise_date
     *
     * @param \DateTime|null $sun_rise_date Timezone-less date value of sun rise of unit (considered at solution's timezone)
     *
     * @return $this
     */
    public function setSunRiseDate($sun_rise_date)
    {
        $this->container['sun_rise_date'] = $sun_rise_date;

        return $this;
    }

    /**
     * Gets sun_set_date
     *
     * @return \DateTime|null
     */
    public function getSunSetDate()
    {
        return $this->container['sun_set_date'];
    }

    /**
     * Sets sun_set_date
     *
     * @param \DateTime|null $sun_set_date Timezone-less date value of sun set of unit (considered at solution's timezone)
     *
     * @return $this
     */
    public function setSunSetDate($sun_set_date)
    {
        $this->container['sun_set_date'] = $sun_set_date;

        return $this;
    }

    /**
     * Gets permit_or_tax_id
     *
     * @return string|null
     */
    public function getPermitOrTaxId()
    {
        return $this->container['permit_or_tax_id'];
    }

    /**
     * Sets permit_or_tax_id
     *
     * @param string|null $permit_or_tax_id permit_or_tax_id
     *
     * @return $this
     */
    public function setPermitOrTaxId($permit_or_tax_id)
    {
        if (!is_null($permit_or_tax_id) && (mb_strlen($permit_or_tax_id) > 255)) {
            throw new \InvalidArgumentException('invalid length for $permit_or_tax_id when calling Unit., must be smaller than or equal to 255.');
        }

        $this->container['permit_or_tax_id'] = $permit_or_tax_id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id external_id
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        if (!is_null($external_id) && (mb_strlen($external_id) > 50)) {
            throw new \InvalidArgumentException('invalid length for $external_id when calling Unit., must be smaller than or equal to 50.');
        }

        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets property_unit_id
     *
     * @return string
     */
    public function getPropertyUnitId()
    {
        return $this->container['property_unit_id'];
    }

    /**
     * Sets property_unit_id
     *
     * @param string $property_unit_id property_unit_id
     *
     * @return $this
     */
    public function setPropertyUnitId($property_unit_id)
    {
        if ((mb_strlen($property_unit_id) > 20)) {
            throw new \InvalidArgumentException('invalid length for $property_unit_id when calling Unit., must be smaller than or equal to 20.');
        }

        $this->container['property_unit_id'] = $property_unit_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


