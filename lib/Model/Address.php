<?php
/**
 * Address
 *
 * PHP version 5
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Patrick Leijser
 * @link     http://patrickleijser.nl
 */

/**
 * Kigo Core API
 *
 * https://www.kigoapis.com/core/v0.8/swagger/
 *
 * The version of the Kigo Core API: v0.8
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\Kigo\Model;

use \ArrayAccess;
use \Piksel\Kigo\ObjectSerializer;

/**
 * Address Class Doc Comment
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Patrick Leijser
 * @link     http://patrickleijser.nl
 */
class Address implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Address';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'address1' => 'string',
        'address2' => 'string',
        'neighborhood' => 'string',
        'city' => 'string',
        'metro' => 'string',
        'state' => 'string',
        'postal_code' => 'string',
        'country' => 'string',
        'latitude' => 'double',
        'longitude' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'address1' => null,
        'address2' => null,
        'neighborhood' => null,
        'city' => null,
        'metro' => null,
        'state' => null,
        'postal_code' => null,
        'country' => null,
        'latitude' => 'double',
        'longitude' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address1' => 'address1',
        'address2' => 'address2',
        'neighborhood' => 'neighborhood',
        'city' => 'city',
        'metro' => 'metro',
        'state' => 'state',
        'postal_code' => 'postalCode',
        'country' => 'country',
        'latitude' => 'latitude',
        'longitude' => 'longitude'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address1' => 'setAddress1',
        'address2' => 'setAddress2',
        'neighborhood' => 'setNeighborhood',
        'city' => 'setCity',
        'metro' => 'setMetro',
        'state' => 'setState',
        'postal_code' => 'setPostalCode',
        'country' => 'setCountry',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address1' => 'getAddress1',
        'address2' => 'getAddress2',
        'neighborhood' => 'getNeighborhood',
        'city' => 'getCity',
        'metro' => 'getMetro',
        'state' => 'getState',
        'postal_code' => 'getPostalCode',
        'country' => 'getCountry',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address1'] = isset($data['address1']) ? $data['address1'] : null;
        $this->container['address2'] = isset($data['address2']) ? $data['address2'] : null;
        $this->container['neighborhood'] = isset($data['neighborhood']) ? $data['neighborhood'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['metro'] = isset($data['metro']) ? $data['metro'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['latitude'] = isset($data['latitude']) ? $data['latitude'] : null;
        $this->container['longitude'] = isset($data['longitude']) ? $data['longitude'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['address1']) && (mb_strlen($this->container['address1']) > 100)) {
            $invalidProperties[] = "invalid value for 'address1', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['address2']) && (mb_strlen($this->container['address2']) > 100)) {
            $invalidProperties[] = "invalid value for 'address2', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['neighborhood']) && (mb_strlen($this->container['neighborhood']) > 100)) {
            $invalidProperties[] = "invalid value for 'neighborhood', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 100)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['metro']) && (mb_strlen($this->container['metro']) > 100)) {
            $invalidProperties[] = "invalid value for 'metro', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['state']) && (mb_strlen($this->container['state']) > 100)) {
            $invalidProperties[] = "invalid value for 'state', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be smaller than or equal to 10.";
        }

        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        if ((mb_strlen($this->container['country']) > 100)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['latitude']) && ($this->container['latitude'] > 9E+1)) {
            $invalidProperties[] = "invalid value for 'latitude', must be smaller than or equal to 9E+1.";
        }

        if (!is_null($this->container['latitude']) && ($this->container['latitude'] < -9E+1)) {
            $invalidProperties[] = "invalid value for 'latitude', must be bigger than or equal to -9E+1.";
        }

        if (!is_null($this->container['longitude']) && ($this->container['longitude'] > 1.8E+2)) {
            $invalidProperties[] = "invalid value for 'longitude', must be smaller than or equal to 1.8E+2.";
        }

        if (!is_null($this->container['longitude']) && ($this->container['longitude'] < -1.8E+2)) {
            $invalidProperties[] = "invalid value for 'longitude', must be bigger than or equal to -1.8E+2.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address1
     *
     * @return string|null
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     *
     * @param string|null $address1 address1
     *
     * @return $this
     */
    public function setAddress1($address1)
    {
        if (!is_null($address1) && (mb_strlen($address1) > 100)) {
            throw new \InvalidArgumentException('invalid length for $address1 when calling Address., must be smaller than or equal to 100.');
        }

        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string|null
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string|null $address2 address2
     *
     * @return $this
     */
    public function setAddress2($address2)
    {
        if (!is_null($address2) && (mb_strlen($address2) > 100)) {
            throw new \InvalidArgumentException('invalid length for $address2 when calling Address., must be smaller than or equal to 100.');
        }

        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets neighborhood
     *
     * @return string|null
     */
    public function getNeighborhood()
    {
        return $this->container['neighborhood'];
    }

    /**
     * Sets neighborhood
     *
     * @param string|null $neighborhood neighborhood
     *
     * @return $this
     */
    public function setNeighborhood($neighborhood)
    {
        if (!is_null($neighborhood) && (mb_strlen($neighborhood) > 100)) {
            throw new \InvalidArgumentException('invalid length for $neighborhood when calling Address., must be smaller than or equal to 100.');
        }

        $this->container['neighborhood'] = $neighborhood;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        if (!is_null($city) && (mb_strlen($city) > 100)) {
            throw new \InvalidArgumentException('invalid length for $city when calling Address., must be smaller than or equal to 100.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets metro
     *
     * @return string|null
     */
    public function getMetro()
    {
        return $this->container['metro'];
    }

    /**
     * Sets metro
     *
     * @param string|null $metro metro
     *
     * @return $this
     */
    public function setMetro($metro)
    {
        if (!is_null($metro) && (mb_strlen($metro) > 100)) {
            throw new \InvalidArgumentException('invalid length for $metro when calling Address., must be smaller than or equal to 100.');
        }

        $this->container['metro'] = $metro;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        if (!is_null($state) && (mb_strlen($state) > 100)) {
            throw new \InvalidArgumentException('invalid length for $state when calling Address., must be smaller than or equal to 100.');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code postal_code
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        if (!is_null($postal_code) && (mb_strlen($postal_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling Address., must be smaller than or equal to 10.');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        if ((mb_strlen($country) > 100)) {
            throw new \InvalidArgumentException('invalid length for $country when calling Address., must be smaller than or equal to 100.');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return double|null
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param double|null $latitude latitude
     *
     * @return $this
     */
    public function setLatitude($latitude)
    {

        if (!is_null($latitude) && ($latitude > 9E+1)) {
            throw new \InvalidArgumentException('invalid value for $latitude when calling Address., must be smaller than or equal to 9E+1.');
        }
        if (!is_null($latitude) && ($latitude < -9E+1)) {
            throw new \InvalidArgumentException('invalid value for $latitude when calling Address., must be bigger than or equal to -9E+1.');
        }

        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return double|null
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param double|null $longitude longitude
     *
     * @return $this
     */
    public function setLongitude($longitude)
    {

        if (!is_null($longitude) && ($longitude > 1.8E+2)) {
            throw new \InvalidArgumentException('invalid value for $longitude when calling Address., must be smaller than or equal to 1.8E+2.');
        }
        if (!is_null($longitude) && ($longitude < -1.8E+2)) {
            throw new \InvalidArgumentException('invalid value for $longitude when calling Address., must be bigger than or equal to -1.8E+2.');
        }

        $this->container['longitude'] = $longitude;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


