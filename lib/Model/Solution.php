<?php
/**
 * Solution
 *
 * PHP version 5
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Patrick Leijser
 * @link     http://patrickleijser.nl
 */

/**
 * Kigo Core API
 *
 * https://www.kigoapis.com/core/v0.8/swagger/
 *
 * The version of the Kigo Core API: v0.8
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Piksel\Kigo\Model;

use \ArrayAccess;
use \Piksel\Kigo\ObjectSerializer;

/**
 * Solution Class Doc Comment
 *
 * @category Class
 * @package  Piksel\Kigo
 * @author   Patrick Leijser
 * @link     http://patrickleijser.nl
 */
class Solution implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Solution';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'locale' => 'string',
        'language' => 'string',
        'supported_locales' => 'string[]',
        'primary_locale' => 'string',
        'currency' => 'string',
        'url' => 'string',
        'office' => '\Piksel\Kigo\Model\SolutionOffice',
        'accepted_cards' => 'string[]',
        'payment_gateways' => '\Piksel\Kigo\Model\PaymentGateway[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'name' => null,
        'locale' => null,
        'language' => null,
        'supported_locales' => null,
        'primary_locale' => null,
        'currency' => null,
        'url' => null,
        'office' => null,
        'accepted_cards' => null,
        'payment_gateways' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'locale' => 'locale',
        'language' => 'language',
        'supported_locales' => 'supportedLocales',
        'primary_locale' => 'primaryLocale',
        'currency' => 'currency',
        'url' => 'url',
        'office' => 'office',
        'accepted_cards' => 'acceptedCards',
        'payment_gateways' => 'paymentGateways'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'locale' => 'setLocale',
        'language' => 'setLanguage',
        'supported_locales' => 'setSupportedLocales',
        'primary_locale' => 'setPrimaryLocale',
        'currency' => 'setCurrency',
        'url' => 'setUrl',
        'office' => 'setOffice',
        'accepted_cards' => 'setAcceptedCards',
        'payment_gateways' => 'setPaymentGateways'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'locale' => 'getLocale',
        'language' => 'getLanguage',
        'supported_locales' => 'getSupportedLocales',
        'primary_locale' => 'getPrimaryLocale',
        'currency' => 'getCurrency',
        'url' => 'getUrl',
        'office' => 'getOffice',
        'accepted_cards' => 'getAcceptedCards',
        'payment_gateways' => 'getPaymentGateways'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const ACCEPTED_CARDS_NOT_SET = 'NotSet';
    const ACCEPTED_CARDS_VISA = 'Visa';
    const ACCEPTED_CARDS_MASTER_CARD = 'MasterCard';
    const ACCEPTED_CARDS_AMERICAN_EXPRESS = 'AmericanExpress';
    const ACCEPTED_CARDS_DISCOVER = 'Discover';
    const ACCEPTED_CARDS_OTHER = 'Other';
    const ACCEPTED_CARDS_DINERS_CLUB = 'DinersClub';
    const ACCEPTED_CARDS_MAESTRO = 'Maestro';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAcceptedCardsAllowableValues()
    {
        return [
            self::ACCEPTED_CARDS_NOT_SET,
            self::ACCEPTED_CARDS_VISA,
            self::ACCEPTED_CARDS_MASTER_CARD,
            self::ACCEPTED_CARDS_AMERICAN_EXPRESS,
            self::ACCEPTED_CARDS_DISCOVER,
            self::ACCEPTED_CARDS_OTHER,
            self::ACCEPTED_CARDS_DINERS_CLUB,
            self::ACCEPTED_CARDS_MAESTRO,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['supported_locales'] = isset($data['supported_locales']) ? $data['supported_locales'] : null;
        $this->container['primary_locale'] = isset($data['primary_locale']) ? $data['primary_locale'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['office'] = isset($data['office']) ? $data['office'] : null;
        $this->container['accepted_cards'] = isset($data['accepted_cards']) ? $data['accepted_cards'] : null;
        $this->container['payment_gateways'] = isset($data['payment_gateways']) ? $data['payment_gateways'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale The locale associated with this apikey
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language language
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets supported_locales
     *
     * @return string[]|null
     */
    public function getSupportedLocales()
    {
        return $this->container['supported_locales'];
    }

    /**
     * Sets supported_locales
     *
     * @param string[]|null $supported_locales List of locales supported by the Solution
     *
     * @return $this
     */
    public function setSupportedLocales($supported_locales)
    {
        $this->container['supported_locales'] = $supported_locales;

        return $this;
    }

    /**
     * Gets primary_locale
     *
     * @return string|null
     */
    public function getPrimaryLocale()
    {
        return $this->container['primary_locale'];
    }

    /**
     * Sets primary_locale
     *
     * @param string|null $primary_locale Primary Locale of the Solution
     *
     * @return $this
     */
    public function setPrimaryLocale($primary_locale)
    {
        $this->container['primary_locale'] = $primary_locale;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets office
     *
     * @return \Piksel\Kigo\Model\SolutionOffice|null
     */
    public function getOffice()
    {
        return $this->container['office'];
    }

    /**
     * Sets office
     *
     * @param \Piksel\Kigo\Model\SolutionOffice|null $office office
     *
     * @return $this
     */
    public function setOffice($office)
    {
        $this->container['office'] = $office;

        return $this;
    }

    /**
     * Gets accepted_cards
     *
     * @return string[]|null
     */
    public function getAcceptedCards()
    {
        return $this->container['accepted_cards'];
    }

    /**
     * Sets accepted_cards
     *
     * @param string[]|null $accepted_cards accepted_cards
     *
     * @return $this
     */
    public function setAcceptedCards($accepted_cards)
    {
        $allowedValues = $this->getAcceptedCardsAllowableValues();
        if (!is_null($accepted_cards) && array_diff($accepted_cards, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'accepted_cards', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['accepted_cards'] = $accepted_cards;

        return $this;
    }

    /**
     * Gets payment_gateways
     *
     * @return \Piksel\Kigo\Model\PaymentGateway[]|null
     */
    public function getPaymentGateways()
    {
        return $this->container['payment_gateways'];
    }

    /**
     * Sets payment_gateways
     *
     * @param \Piksel\Kigo\Model\PaymentGateway[]|null $payment_gateways Active payment gateways configured in the solution
     *
     * @return $this
     */
    public function setPaymentGateways($payment_gateways)
    {
        $this->container['payment_gateways'] = $payment_gateways;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


